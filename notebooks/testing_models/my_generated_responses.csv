code,tests,prompted_code,generated_text
"public static void write(JModel jm, File outdir, String methodnamePrefix) throws IOException {
        write(jm, outdir, TEMPLATE_CLASS, methodnamePrefix);
    }","@Test
	public void testWrite() throws Exception {
		JModel jm = new JModel(JClass.RDFS_CLASS);
		JPackage jp = new JPackage(""test"");
		jm.addPackage(jp);
		JClass jc1 = new JClass(jp, ""Person"", new URIImpl(""urn:ex:Person""));
		jc1.setComment(""All persons in the world"");
		jc1.setJavaSuperclass(new JClass(new JPackage(""""),""org.ontoware.rdfreactor.runtime.ReactorRuntimeEntity"",new URIImpl(""urn:ex:object"")));
		jp.getClasses().add(jc1);

		// deprecated
		// JProperty jprop1 = new JProperty(""age"", new
		// JAttribute(Integer.class),
		// URIUtils.createURI(""schema://age""), 1, 1);
		// jc1.getProperties().add(jprop1);
		JProperty jprop2 = new JProperty(jc1, ""friend"", new URIImpl(""urn:ex:knows""), JProperty.NOT_SET, JProperty.NOT_SET );
		jprop2.setComment(""A persons knows other persons. They can be considered friends."");
		jprop2.addType(jc1);
		jc1.getProperties().add(jprop2);
		SourceCodeWriter.write(jm, new File(outdir), SourceCodeWriter.TEMPLATE_CLASS,""Prefix"");

	}","Here is a method implementation in Java:

public static void write(JModel jm, File outdir, String methodnamePrefix) throws IOException {
        write(jm, outdir, TEMPLATE_CLASS, methodnamePrefix);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void write(JModel jm, File outdir, String methodnamePrefix) throws IOException {
        write(jm, outdir, TEMPLATE_CLASS, methodnamePrefix);
    }

Write a full test class with test cases to validate the method defined above.

Here's how you can write a full test class with test cases to validate the `"
"@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if (this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			ensureTransaction();
			try {
				try {
					// remove all
					while (iterator.hasNext()) {
						org.eclipse.rdf4j.model.Statement s = ConversionUtil.toRDF4J(iterator.next(),
								this.valueFactory);
						this.connection.remove(s, this.rdf4jContext);
					}
					ensureAutoCommitted();
				} catch (RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				ensureAutoCommitted();
			}
		} catch (RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}","@Override
	@Test
	public void testRemoveAll() throws Exception {
		Repository repo = new SailRepository(new MemoryStore());
		repo.initialize();
		RepositoryModelSet modelSet = new RepositoryModelSet(repo);
		modelSet.open();
		URI context1 = new URIImpl(""uri:context1"");
		URI context2 = new URIImpl(""uri:context2"");
		modelSet.addStatement(context1, new URIImpl(""uri:r1""), new URIImpl(
				""uri:p1""), new URIImpl(""uri:r2""));
		modelSet.addStatement(context1, new URIImpl(""uri:r1""), new URIImpl(
				""uri:p1""), new URIImpl(""uri:r3""));
		modelSet.addStatement(context2, new URIImpl(""uri:r4""), new URIImpl(
				""uri:p2""), new URIImpl(""uri:r5""));
		modelSet.addStatement(context2, new URIImpl(""uri:r4""), new URIImpl(
				""uri:p2""), new URIImpl(""uri:r6""));
		Model model1 = modelSet.getModel(context1);
		model1.open();
		Model model2 = modelSet.getModel(context2);
		model2.open();
		assertEquals(4, modelSet.size());
		assertEquals(2, model1.size());
		assertEquals(2, model2.size());

		model2.removeAll();

		assertEquals(2, modelSet.size());
		assertEquals(2, model1.size());
		assertEquals(0, model2.size());
		model1.close();
		model2.close();
	}","Here is a method implementation in Java:

@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if (this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			ensureTransaction();
			try {
				try {
					// remove all
					while (iterator.hasNext()) {
						org.eclipse.rdf4j.model.Statement s = ConversionUtil.toRDF4J(iterator.next(),
								this.valueFactory);
						this.connection.remove(s, this.rdf4jContext);
					}
					ensureAutoCommitted();
				} catch (RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				ensureAutoCommitted();
			}
		} catch (RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if (this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			ensureTransaction();
			try {
				try {
					// remove all
					while (iterator.hasNext()) {
						org.eclipse.rdf4j.model.Statement s = ConversionUtil.toRDF4J(iterator.next(),
								this.valueFactory);
						this.connection.remove(s, this.rdf4jContext);
					}
					ensureAutoCommitted();
				} catch (RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				ensureAutoCommitted();
			}
		} catch (RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.eclipse.rdf4"
"@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if(this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			this.connection.begin();
			try {
				try {
					// remove all
					while(iterator.hasNext()) {
						org.openrdf.model.Statement s = ConversionUtil.toOpenRDF(iterator.next(),
						        this.valueFactory);
						this.connection.remove(s, this.openRdfContext);
					}
					this.connection.commit();
				} catch(RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				this.connection.commit();
			}
		} catch(RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}","@Override
	@Test
	public void testRemoveAll() throws Exception {
		Repository repo = new SailRepository(new MemoryStore());
		repo.initialize();
		RepositoryModelSet modelSet = new RepositoryModelSet(repo);
		modelSet.open();
		URI context1 = new URIImpl(""uri:context1"");
		URI context2 = new URIImpl(""uri:context2"");
		modelSet.addStatement(context1, new URIImpl(""uri:r1""), new URIImpl(
				""uri:p1""), new URIImpl(""uri:r2""));
		modelSet.addStatement(context1, new URIImpl(""uri:r1""), new URIImpl(
				""uri:p1""), new URIImpl(""uri:r3""));
		modelSet.addStatement(context2, new URIImpl(""uri:r4""), new URIImpl(
				""uri:p2""), new URIImpl(""uri:r5""));
		modelSet.addStatement(context2, new URIImpl(""uri:r4""), new URIImpl(
				""uri:p2""), new URIImpl(""uri:r6""));
		Model model1 = modelSet.getModel(context1);
		model1.open();
		Model model2 = modelSet.getModel(context2);
		model2.open();
		assertEquals(4, modelSet.size());
		assertEquals(2, model1.size());
		assertEquals(2, model2.size());

		model2.removeAll();

		assertEquals(2, modelSet.size());
		assertEquals(2, model1.size());
		assertEquals(0, model2.size());
		model1.close();
		model2.close();
	}","Here is a method implementation in Java:

@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if(this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			this.connection.begin();
			try {
				try {
					// remove all
					while(iterator.hasNext()) {
						org.openrdf.model.Statement s = ConversionUtil.toOpenRDF(iterator.next(),
						        this.valueFactory);
						this.connection.remove(s, this.openRdfContext);
					}
					this.connection.commit();
				} catch(RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				this.connection.commit();
			}
		} catch(RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
	public void removeAll(Iterator<? extends Statement> iterator) throws ModelRuntimeException {
		if(this.isLocked()) {
			throw new ModelRuntimeException(""Model is locked, cannot perform an update."");
		}
		// do not auto-commit
		assertModel();
		try {
			this.connection.begin();
			try {
				try {
					// remove all
					while(iterator.hasNext()) {
						org.openrdf.model.Statement s = ConversionUtil.toOpenRDF(iterator.next(),
						        this.valueFactory);
						this.connection.remove(s, this.openRdfContext);
					}
					this.connection.commit();
				} catch(RepositoryException x) {
					this.connection.rollback();
				}
			} finally {
				this.connection.commit();
			}
		} catch(RepositoryException x) {
			throw new ModelRuntimeException(x);
		}
	}

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `removeAll` method:
"
"public static boolean hasSuperClass(Class<?> classA, Class<?> classB) {
		// end recursion
		if (classA.equals(classB))
			return true;

		boolean superclass = false;

		// check superclass
		Class<?> superClass = classA.getSuperclass();
		if (superClass != null) {
			if (superClass.equals(classB))
				superclass = true;
			else
				// recursion
				superclass = hasSuperClass(superClass, classB);
		}

		if (!superclass) {
			// check interfaces, recursively
			Class<?>[] interfaces = classA.getInterfaces();
			for (Class<?> interfaze : interfaces) {
				if (interfaze.equals(classB))
					return true;
				else {
					return hasSuperClass(interfaze, classB);
				}
			}
		}

		return superclass;

	}","@Test
	public void testHasSuperClass() {
		assertTrue(ReflectionUtils.hasSuperClass(URI.class, Object.class));
		assertFalse(ReflectionUtils.hasSuperClass(Object.class, URI.class));
		assertTrue(ReflectionUtils.hasSuperClass(Object.class, Object.class));
		assertTrue(ReflectionUtils.hasSuperClass(URI.class, URI.class));

		assertTrue(ReflectionUtils.hasSuperClass(BufferedReader.class,
				Reader.class));
		assertFalse(ReflectionUtils.hasSuperClass(Reader.class,
				BufferedReader.class));

		assertTrue(ReflectionUtils.hasSuperClass(BufferedReader.class,
				Readable.class));
		assertTrue(ReflectionUtils.hasSuperClass(Reader.class, Readable.class));
		assertFalse(ReflectionUtils.hasSuperClass(URI.class, Readable.class));
		assertFalse(ReflectionUtils.hasSuperClass(URI.class, Serializable.class));
		assertTrue(ReflectionUtils.hasSuperClass(URI.class, Comparable.class));

	}","Here is a method implementation in Java:

public static boolean hasSuperClass(Class<?> classA, Class<?> classB) {
		// end recursion
		if (classA.equals(classB))
			return true;

		boolean superclass = false;

		// check superclass
		Class<?> superClass = classA.getSuperclass();
		if (superClass != null) {
			if (superClass.equals(classB))
				superclass = true;
			else
				// recursion
				superclass = hasSuperClass(superClass, classB);
		}

		if (!superclass) {
			// check interfaces, recursively
			Class<?>[] interfaces = classA.getInterfaces();
			for (Class<?> interfaze : interfaces) {
				if (interfaze.equals(classB))
					return true;
				else {
					return hasSuperClass(interfaze, classB);
				}
			}
		}

		return superclass;

	}

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static boolean hasSuperClass(Class<?> classA, Class<?> classB) {
		// end recursion
		if (classA.equals(classB))
			return true;

		boolean superclass = false;

		// check superclass
		Class<?> superClass = classA.getSuperclass();
		if (superClass != null) {
			if (superClass.equals(classB))
				superclass = true;
			else
				// recursion
				superclass = hasSuperClass(superClass, classB);
		}

		if (!superclass) {
			// check interfaces, recursively
			Class<?>[] interfaces = classA.getInterfaces();
			for (Class<?> interfaze : interfaces) {
				if (interfaze.equals(classB))
					return true;
				else {
					return hasSuperClass(interfaze, classB);
				}
			}
		}

		return superclass;

	}

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java:

import static org.junit.Assert"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test(expected = MessageFormatException.class)
    public void testCheckValidObjectList() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(Collections.EMPTY_LIST);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `checkValidObject` method"
"public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateFillsMessageFromMCauseessageParamMessage() {
        JMSException result = JMSExceptionSupport.create(new IOException(CAUSE_MESSAGE));
        assertEquals(CAUSE_MESSAGE, result.getMessage());
    }","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.jupiter"
"public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckPropertyNameIsValidWithNullName() throws JMSException {
        JMSMessagePropertySupport.checkPropertyNameIsValid(null, true);
    }","Here is a method implementation in Java:

public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetObjectPropertyWithInvalidObject() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(GOOD_PROPERTY_NAME, UUID.randomUUID());
            fail(""Should not accept invalid property name"");
        } catch (MessageFormatRuntimeException mfre) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class with test cases to validate the `setProperty`"
"@Override
    public long getLongProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Long.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test
    public void testGetLongProperty() {
        JMSProducer producer = context.createProducer();
        producer.setProperty(LONG_PROPERTY_NAME, LONG_PROPERTY_VALUE);
        assertEquals(LONG_PROPERTY_VALUE, producer.getLongProperty(LONG_PROPERTY_NAME));
    }","Here is a method implementation in Java:

@Override
    public long getLongProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Long.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public long getLongProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Long.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

To write a full test class with test cases for the `getLongProperty` method,"
"public void stop() {
        if (stopped.compareAndSet(false, true)) {
            LOG.debug(""Stopping the JmsPoolConnectionFactory, number of connections in cache: {}"",
                      connectionsPool != null ? connectionsPool.getNumActive() : 0);
            try {
                if (connectionsPool != null) {
                    connectionsPool.close();
                    connectionsPool = null;
                }
            } catch (Exception ignored) {
                LOG.trace(""Caught exception on close of the Connection pool: "", ignored);
            }
        }
    }","@Test(timeout = 60000)
    public void testInstanceOf() throws  Exception {
        cf = new JmsPoolConnectionFactory();
        assertTrue(cf instanceof QueueConnectionFactory);
        assertTrue(cf instanceof TopicConnectionFactory);
        cf.stop();
    }","Here is a method implementation in Java:

public void stop() {
        if (stopped.compareAndSet(false, true)) {
            LOG.debug(""Stopping the JmsPoolConnectionFactory, number of connections in cache: {}"",
                      connectionsPool != null ? connectionsPool.getNumActive() : 0);
            try {
                if (connectionsPool != null) {
                    connectionsPool.close();
                    connectionsPool = null;
                }
            } catch (Exception ignored) {
                LOG.trace(""Caught exception on close of the Connection pool: "", ignored);
            }
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public void stop() {
        if (stopped.compareAndSet(false, true)) {
            LOG.debug(""Stopping the JmsPoolConnectionFactory, number of connections in cache: {}"",
                      connectionsPool != null ? connectionsPool.getNumActive() : 0);
            try {
                if (connectionsPool != null) {
                    connectionsPool.close();
                    connectionsPool = null;
                }
            } catch (Exception ignored) {
                LOG.trace(""Caught exception on close of the Connection pool: "", ignored);
            }
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.Before;"
"@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }","@Test
    public void testSendToQueue() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        QueueSender sender = session.createSender(null);

        final AtomicBoolean sent = new AtomicBoolean();
        MockJMSConnection mockConnection = (MockJMSConnection) connection.getConnection();
        mockConnection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                assertTrue(message instanceof TextMessage);
                sent.set(true);
            }
        });

        sender.send(queue, session.createTextMessage());

        assertTrue(sent.get());
    }","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.

Sure, here is a full test class with test cases to validate the `send` method"
"public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierLetterAndDigitRequirementsContainsColon() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierLetterAndDigitRequirements(""a:b"");
    }","Here is a method implementation in Java:

public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import org.junit.jupiter."
"public static void checkIdentifierIsntNullTrueFalse(String identifier) {
        // Identifiers cannot be the names NULL, TRUE, and FALSE.
        if (""NULL"".equals(identifier) || ""TRUE"".equals(identifier) || ""FALSE"".equals(identifier)) {
            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierIsntNullTrueFalseTrue() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierIsntNullTrueFalse(""TRUE"");
    }","Here is a method implementation in Java:

public static void checkIdentifierIsntNullTrueFalse(String identifier) {
        // Identifiers cannot be the names NULL, TRUE, and FALSE.
        if (""NULL"".equals(identifier) || ""TRUE"".equals(identifier) || ""FALSE"".equals(identifier)) {
            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierIsntNullTrueFalse(String identifier) {
        // Identifiers cannot be the names NULL, TRUE, and FALSE.
        if (""NULL"".equals(identifier) || ""TRUE"".equals(identifier) || ""FALSE"".equals(identifier)) {
            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetShortPropertyWithBadPropertyName() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(BAD_PROPERTY_NAME, (short) 100);
            fail(""Should not accept invalid property name"");
        } catch (IllegalArgumentException iae) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class with test cases to validate the method defined above:

"
"@Override
    public void unsubscribe(String name) {
        try {
            getSession().unsubscribe(name);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testUnsubscribe() {
        JmsPoolJMSContext context = (JmsPoolJMSContext) cf.createContext();

        context.unsubscribe(""sub"");
        context.close();

        try {
            context.unsubscribe(""sub"");
            fail(""Cannot unsubscribe from a closed resource"");
        } catch (JMSRuntimeException jmsre) {}
    }","Here is a method implementation in Java:

@Override
    public void unsubscribe(String name) {
        try {
            getSession().unsubscribe(name);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void unsubscribe(String name) {
        try {
            getSession().unsubscribe(name);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class with test cases to validate the `unsubscribe"
"public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateFillsMessageFromMCauseessageParamToString() {
        JMSException result = JMSExceptionSupport.create(NO_MESSAGE_CAUSE);
        assertEquals(NO_MESSAGE_CAUSE.toString(), result.getMessage());
    }","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.jupiter"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectInteger() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(Integer.MAX_VALUE);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java:

import static org.junit."
"@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }","@Test(expected = NullPointerException.class)
    public void testConvertPropertyToNullFloatTarget() throws JMSException {
        JMSMessagePropertySupport.convertPropertyTo(""float"", null, Float.class);
    }","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `convertPropertyTo` method:"
"public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }","@Test(expected = JMSRuntimeException.class)
    public void testConvertsNonJMSExceptionToJMSRuntimeException() {
        throw JMSExceptionSupport.createRuntimeException(new IOException());
    }","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test
    public void testNullDestinationOnSendToTargetedProducer() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(session.createTemporaryQueue());

        try {
            producer.send(null, session.createMessage());
            fail(""Should not be able to send with null destination"");
        } catch (InvalidDestinationException ide) {}
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of how you might write a test class for the `send` method"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetStringPropertyWithBadPropertyName() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(BAD_PROPERTY_NAME, ""X"");
            fail(""Should not accept invalid property name"");
        } catch (IllegalArgumentException iae) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `setProperty` method:
"
"@Override
    public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
        return addTopicSubscriber(((TopicSession) getInternalSession()).createSubscriber(topic));
    }","@Test(timeout = 60000)
    public void testCreateSubscriber() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        JmsPoolSession session = (JmsPoolSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        Topic topic = session.createTopic(getTestName());
        assertNotNull(session.createSubscriber(topic));

        session.close();
        try {
            session.createSubscriber(topic);
            fail(""Should not be able to createSubscriber when closed"");
        } catch (JMSException ex) {}
    }","Here is a method implementation in Java:

@Override
    public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
        return addTopicSubscriber(((TopicSession) getInternalSession()).createSubscriber(topic));
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public TopicSubscriber createSubscriber(Topic topic) throws JMSException {
        return addTopicSubscriber(((TopicSession) getInternalSession()).createSubscriber(topic));
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class with test cases to validate the `createSubscriber` method:"
"public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }","@Test(expected = InvalidSelectorRuntimeException.class)
    public void testConvertsInvalidSelectorExceptionToInvalidSelectorRuntimeException() {
        throw JMSExceptionSupport.createRuntimeException(new InvalidSelectorException(""error""));
    }","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.jupiter"
"@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }","@Test(expected = NumberFormatException.class)
    public void testConvertPropertyToNullLongTarget() throws JMSException {
        JMSMessagePropertySupport.convertPropertyTo(""number"", null, Long.class);
    }","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `convertPropertyTo` method:"
"public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }","@Test(expected = JMSSecurityRuntimeException.class)
    public void testConvertsJMSSecurityExceptionToJMSSecurityRuntimeException() {
        throw JMSExceptionSupport.createRuntimeException(new JMSSecurityException(""error""));
    }","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"@Override
    public Topic getTopic() throws JMSException {
        return (Topic) getDestination();
    }","@Test
    public void testGetTopic() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
        Topic topic = session.createTemporaryTopic();
        TopicPublisher publisher = session.createPublisher(topic);

        assertNotNull(publisher.getTopic());
        assertSame(topic, publisher.getTopic());

        publisher.close();

        try {
            publisher.getTopic();
            fail(""Cannot read topic on closed publisher"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Topic getTopic() throws JMSException {
        return (Topic) getDestination();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Topic getTopic() throws JMSException {
        return (Topic) getDestination();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a test class in Java using JUnit:

import static"
"@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }","@Test
    public void testSendNullMessageThrowsMFRE() throws JMSException {
        JMSProducer producer = context.createProducer();

        try {
            producer.send(JMS_DESTINATION, (Message) null);
            fail(""Should throw a MessageFormatRuntimeException"");
        } catch (MessageFormatRuntimeException mfre) {
        } catch (Exception e) {
            fail(""Should throw a MessageFormatRuntimeException"");
        }
    }","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import javax.jms.Destination"
"@Override
    public TemporaryTopic createTemporaryTopic() {
        try {
            return getSession().createTemporaryTopic();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateTemporaryTopic() {
        JMSContext context = cf.createContext();
        assertNotNull(context.createTemporaryTopic());

        context.close();
        try {
            context.createTemporaryTopic();
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public TemporaryTopic createTemporaryTopic() {
        try {
            return getSession().createTemporaryTopic();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public TemporaryTopic createTemporaryTopic() {
        try {
            return getSession().createTemporaryTopic();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `createTemporaryTopic` method"
"@Override
    public TopicSubscriber createDurableSubscriber(Topic topic, String selector) throws JMSException {
        return addTopicSubscriber(getInternalSession().createDurableSubscriber(topic, selector));
    }","@Test(timeout = 60000)
    public void testCreateDurableSubscriber() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        JmsPoolSession session = (JmsPoolSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        Topic topic = session.createTopic(getTestName());
        assertNotNull(session.createDurableSubscriber(topic, ""name""));

        session.close();
        try {
            session.createDurableSubscriber(topic, ""name-2"");
            fail(""Should not be able to createDurableSubscriber when closed"");
        } catch (JMSException ex) {}
    }","Here is a method implementation in Java:

@Override
    public TopicSubscriber createDurableSubscriber(Topic topic, String selector) throws JMSException {
        return addTopicSubscriber(getInternalSession().createDurableSubscriber(topic, selector));
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public TopicSubscriber createDurableSubscriber(Topic topic, String selector) throws JMSException {
        return addTopicSubscriber(getInternalSession().createDurableSubscriber(topic, selector));
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `createDurableSubscriber`"
"@Override
    public byte getByteProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Byte.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test
    public void testGetByteProperty() {
        JMSProducer producer = context.createProducer();
        producer.setProperty(BYTE_PROPERTY_NAME, BYTE_PROPERTY_VALUE);
        assertEquals(BYTE_PROPERTY_VALUE, producer.getByteProperty(BYTE_PROPERTY_NAME));
    }","Here is a method implementation in Java:

@Override
    public byte getByteProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Byte.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public byte getByteProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Byte.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java using JUnit to validate the `getByte"
"@Override
    public XAResource getXAResource() {
        final PooledSessionHolder session;
        try {
            session = safeGetSessionHolder();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }

        if (session.getSession() instanceof XASession) {
            return ((XASession) session.getSession()).getXAResource();
        }

        return null;
    }","@Test(timeout = 60000)
    public void testGetXAResource() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        JmsPoolSession session = (JmsPoolSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        assertNull(""Non-XA session should not return an XA Resource"", session.getXAResource());

        session.close();

        try {
            session.getXAResource();
            fail(""Session should be closed."");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public XAResource getXAResource() {
        final PooledSessionHolder session;
        try {
            session = safeGetSessionHolder();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }

        if (session.getSession() instanceof XASession) {
            return ((XASession) session.getSession()).getXAResource();
        }

        return null;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public XAResource getXAResource() {
        final PooledSessionHolder session;
        try {
            session = safeGetSessionHolder();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }

        if (session.getSession() instanceof XASession) {
            return ((XASession) session.getSession()).getXAResource();
        }

        return null;
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class with test cases to validate the method defined above:

"
"public QueueSender getQueueSender() throws JMSException {
        return (QueueSender) getMessageProducer();
    }","@Test
    public void testGetTopicSubscriber() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        JmsPoolQueueSender sender = (JmsPoolQueueSender) session.createSender(queue);

        assertNotNull(sender.getQueueSender());
        assertTrue(sender.getQueueSender() instanceof MockJMSQueueSender);

        sender.close();

        try {
            sender.getQueueSender();
            fail(""Cannot read state on closed sender"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

public QueueSender getQueueSender() throws JMSException {
        return (QueueSender) getMessageProducer();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public QueueSender getQueueSender() throws JMSException {
        return (QueueSender) getMessageProducer();
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `getQueueSender` method"
"public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierLetterAndDigitRequirementsStartWithNumber() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierLetterAndDigitRequirements(""1"");
    }","Here is a method implementation in Java:

public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierLetterAndDigitRequirements(String identifier) {
        // An identifier is an unlimited-length sequence of letters and digits, the first of
        // which must be a letter.  A letter is any character for which the method
        // Character.isJavaLetter returns true.  This includes '_' and '$'.  A letter or digit
        // is any character for which the method Character.isJavaLetterOrDigit returns true.
        char startChar = identifier.charAt(0);
        if (!(Character.isJavaIdentifierStart(startChar))) {
            throw new IllegalArgumentException(""Identifier does not begin with a valid JMS identifier start character: '"" + identifier + ""' "");
        }

        // JMS part character
        int length = identifier.length();
        for (int i = 1; i < length; i++) {
            char ch = identifier.charAt(i);
            if (!(Character.isJavaIdentifierPart(ch))) {
                throw new IllegalArgumentException(""Identifier contains invalid JMS identifier character '"" + ch + ""': '"" + identifier + ""' "");
            }
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@Override
    public Queue getQueue() throws JMSException {
        return (Queue) getDestination();
    }","@Test
    public void testGetQueue() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        QueueSender sender = session.createSender(queue);

        assertNotNull(sender.getQueue());
        assertSame(queue, sender.getQueue());

        sender.close();

        try {
            sender.getQueue();
            fail(""Cannot read topic on closed sender"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Queue getQueue() throws JMSException {
        return (Queue) getDestination();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Queue getQueue() throws JMSException {
        return (Queue) getDestination();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a test class in Java using JUnit:

import static"
"@Override
    public void publish(Message message) throws JMSException {
        super.send(message);
    }","@Test
    public void testPublishTopicWithOverrides() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
        Topic topic = session.createTemporaryTopic();
        TopicPublisher publisher = session.createPublisher(null);

        final AtomicBoolean published = new AtomicBoolean();
        MockJMSConnection mockConnection = (MockJMSConnection) connection.getConnection();
        mockConnection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
                assertEquals(9, message.getJMSPriority());
                assertTrue(message.getJMSExpiration() != 0);

                published.set(true);
            }
        });

        publisher.publish(topic, session.createTextMessage(), DeliveryMode.PERSISTENT, 9, 1000);

        assertTrue(published.get());
    }","Here is a method implementation in Java:

@Override
    public void publish(Message message) throws JMSException {
        super.send(message);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void publish(Message message) throws JMSException {
        super.send(message);
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java that validates the `publish` method:

import"
"@Override
    public void setDeliveryDelay(long deliveryDelay) throws JMSException {
        checkClosed();
        session.checkClientJMSVersionSupport(2, 0);

        this.deliveryDelay = deliveryDelay;
        this.messageProducer.setDeliveryDelay(deliveryDelay);
    }","@Test
    public void testSetDeliveryDelay() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();

        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageProducer producer = session.createProducer(queue);

        assertEquals(0, producer.getDeliveryDelay());
        producer.setDeliveryDelay(1);
        assertEquals(1, producer.getDeliveryDelay());

        producer.close();

        try {
            producer.setDeliveryDelay(0);
            fail(""Should throw when producer is closed."");
        } catch (IllegalStateException ise) {}

        try {
            producer.getDeliveryDelay();
            fail(""Should throw when producer is closed."");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public void setDeliveryDelay(long deliveryDelay) throws JMSException {
        checkClosed();
        session.checkClientJMSVersionSupport(2, 0);

        this.deliveryDelay = deliveryDelay;
        this.messageProducer.setDeliveryDelay(deliveryDelay);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void setDeliveryDelay(long deliveryDelay) throws JMSException {
        checkClosed();
        session.checkClientJMSVersionSupport(2, 0);

        this.deliveryDelay = deliveryDelay;
        this.messageProducer.setDeliveryDelay(deliveryDelay);
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class in Java using JUnit:

import"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectCharacter() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(Character.MAX_VALUE);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `checkValidObject` method"
"@Override
    public TextMessage createTextMessage() {
        try {
            return getSession().createTextMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateTextMessage() {
        JMSContext context = cf.createContext();
        assertNotNull(context.createTextMessage());

        context.close();
        try {
            context.createTextMessage();
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public TextMessage createTextMessage() {
        try {
            return getSession().createTextMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public TextMessage createTextMessage() {
        try {
            return getSession().createTextMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java using JUnit to validate the `createText"
"public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }","@Test
    public void testCheckPropertyNameWithLogicOperatorValidationDisabled() throws JMSException {
        JMSMessagePropertySupport.checkPropertyNameIsValid(""OR"", false);
    }","Here is a method implementation in Java:

public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkPropertyNameIsValid(String propertyName, boolean validateNames) throws IllegalArgumentException {
        if (propertyName == null) {
            throw new IllegalArgumentException(""Property name must not be null"");
        } else if (propertyName.length() == 0) {
            throw new IllegalArgumentException(""Property name must not be the empty string"");
        }

        if (validateNames) {
            checkIdentifierLetterAndDigitRequirements(propertyName);
            checkIdentifierIsntNullTrueFalse(propertyName);
            checkIdentifierIsntLogicOperator(propertyName);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class for the `checkPropertyNameIsValid` method:

import"
"public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateMessageEOFExceptionFillsMessageFromCauseMessageParamToStringWhenMessageIsEmpty() {
        JMSException result = JMSExceptionSupport.createMessageEOFException(EMPTY_MESSAGE_CAUSE);
        assertEquals(EMPTY_MESSAGE_CAUSE.toString(), result.getMessage());
    }","Here is a method implementation in Java:

public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `createMessageEOFException` method"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test(timeout = 10000)
    public void testAnonymousProducerThrowsIAEWhenNullCompletionListenerProvided() throws Exception {
        Destination dest = new MockJMSQueue(""explicitDestination"");

        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(null);

        Message message = session.createMessage();

        try {
            producer.send(dest, message, null);
            fail(""Expected exception not thrown"");
        } catch (IllegalArgumentException iae) {
            // expected
        }

        try {
            producer.send(dest, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE, null);
            fail(""Expected exception not thrown"");
        } catch (IllegalArgumentException iae) {
            // expected
        }
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of how you might write a test class for the `send` method"
"@Override
    public void setMessageListener(MessageListener listener) throws JMSException {
        checkClosed();
        messageConsumer.setMessageListener(listener);
    }","@Test
    public void testSetMessageListener() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageConsumer consumer = session.createConsumer(queue);

        MessageListener listener = new MessageListener() {

            @Override
            public void onMessage(Message message) {
            }
        };

        assertNull(consumer.getMessageListener());
        consumer.setMessageListener(listener);
        assertNotNull(consumer.getMessageListener());
        assertEquals(listener, consumer.getMessageListener());

        consumer.close();

        try {
            consumer.setMessageListener(null);
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateException ise) {}

        try {
            consumer.getMessageListener();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public void setMessageListener(MessageListener listener) throws JMSException {
        checkClosed();
        messageConsumer.setMessageListener(listener);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void setMessageListener(MessageListener listener) throws JMSException {
        checkClosed();
        messageConsumer.setMessageListener(listener);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `setMessageListener` method"
"public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateFillsMessageFromCauseMessageParamWhenErrorMessageIsEmpty() {
        JMSException result = JMSExceptionSupport.create("""", new IOException(CAUSE_MESSAGE));
        assertEquals(CAUSE_MESSAGE, result.getMessage());
    }","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `create` method:

"
"@Override
    public Message receive() throws JMSException {
        checkClosed();
        return messageConsumer.receive();
    }","@Test
    public void testReceive() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageConsumer consumer = session.createConsumer(queue, ""Color = Red"");

        assertNull(consumer.receive());

        consumer.close();

        try {
            consumer.receive();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Message receive() throws JMSException {
        checkClosed();
        return messageConsumer.receive();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Message receive() throws JMSException {
        checkClosed();
        return messageConsumer.receive();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of how you might write a test class for the `receive` method"
"@Override
    public String getMessageSelector() {
        try {
            return consumer.getMessageSelector();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }","@Test
    public void testGetMessageSelector() throws JMSException {
        JMSConsumer consumer = context.createConsumer(context.createTemporaryQueue(), ""Color = Red"");

        assertNotNull(consumer.getMessageSelector());
        assertEquals(""Color = Red"", consumer.getMessageSelector());

        consumer.close();

        try {
            consumer.getMessageSelector();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateRuntimeException ise) {}
    }","Here is a method implementation in Java:

@Override
    public String getMessageSelector() {
        try {
            return consumer.getMessageSelector();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public String getMessageSelector() {
        try {
            return consumer.getMessageSelector();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example test class in Java:

import org.junit.jupiter"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetObjectPropertyWithBadPropertyName() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(BAD_PROPERTY_NAME, UUID.randomUUID());
            fail(""Should not accept invalid property name"");
        } catch (IllegalArgumentException iae) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `setProperty` method:
"
"@Override
    public ExceptionListener getExceptionListener() {
        try {
            return connection.getExceptionListener();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testGetExceptionListener() {
        JMSContext context = cf.createContext();
        assertNull(context.getExceptionListener());
        context.setExceptionListener(new ExceptionListener() {

            @Override
            public void onException(JMSException exception) {
            }
        });
        assertNotNull(context.getExceptionListener());

        context.close();

        try {
            context.getExceptionListener();
            fail(""Should not be able to get ExceptionListener from closed."");
        } catch (JMSRuntimeException jmsre) {}

        try {
            context.setExceptionListener(new ExceptionListener() {

                @Override
                public void onException(JMSException exception) {
                }
            });
            fail(""Should not be able to set ExceptionListener from closed."");
        } catch (JMSRuntimeException jmsre) {}
    }","Here is a method implementation in Java:

@Override
    public ExceptionListener getExceptionListener() {
        try {
            return connection.getExceptionListener();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public ExceptionListener getExceptionListener() {
        try {
            return connection.getExceptionListener();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class with test cases to validate the method defined above:

"
"@Override
    public double getDoubleProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Double.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test
    public void testGetDoubleProperty() {
        JMSProducer producer = context.createProducer();
        producer.setProperty(DOUBLE_PROPERTY_NAME, DOUBLE_PROPERTY_VALUE);
        assertEquals(DOUBLE_PROPERTY_VALUE, producer.getDoubleProperty(DOUBLE_PROPERTY_NAME), 0.0);
    }","Here is a method implementation in Java:

@Override
    public double getDoubleProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Double.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public double getDoubleProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Double.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a test class in Java using JUnit:

import static"
"@Override
    public Message receiveNoWait() {
        try {
            return consumer.receiveNoWait();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }","@Test
    public void testReceiveNoWait() throws JMSException {
        JMSConsumer consumer = context.createConsumer(context.createTemporaryQueue());

        assertNull(consumer.receiveNoWait());

        consumer.close();

        try {
            consumer.receiveNoWait();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateRuntimeException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Message receiveNoWait() {
        try {
            return consumer.receiveNoWait();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Message receiveNoWait() {
        try {
            return consumer.receiveNoWait();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }","@Test(expected = NumberFormatException.class)
    public void testConvertPropertyToNullIntegerTarget() throws JMSException {
        JMSMessagePropertySupport.convertPropertyTo(""number"", null, Integer.class);
    }","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.jupiter"
"@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }","@Test
    public void testBytesBodyIsApplied() throws JMSException {
        JMSProducer producer = context.createProducer();

        final byte[] bodyValue = new byte[] { 0, 1, 2, 3, 4 };
        final AtomicBoolean bodyValidated = new AtomicBoolean();

        MockJMSConnection connection = (MockJMSConnection) context.getConnection();
        connection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                byte[] payload = message.getBody(byte[].class);
                assertNotNull(payload);
                assertEquals(bodyValue.length, payload.length);

                for (int i = 0; i < payload.length; ++i) {
                    assertEquals(bodyValue[i], payload[i]);
                }

                bodyValidated.set(true);
            }
        });

        producer.send(JMS_DESTINATION, bodyValue);
        assertTrue(bodyValidated.get());
    }","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java using JUnit to validate the `send`"
"@Override
    public String toString() {
        return getClass().getSimpleName() + "" { "" + messageProducer + "" }"";
    }","@Test
    public void testToString() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageProducer producer = session.createProducer(queue);

        assertNotNull(producer.toString());
    }","Here is a method implementation in Java:

@Override
    public String toString() {
        return getClass().getSimpleName() + "" { "" + messageProducer + "" }"";
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public String toString() {
        return getClass().getSimpleName() + "" { "" + messageProducer + "" }"";
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"public void setConnectionFactory(final Object factory) {
        if (factory instanceof ConnectionFactory) {
            String logMessage = ""JMS ConnectionFactory on classpath is not a JMS 2.0+ version."";
            try {
                ConnectionFactory.class.getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is not JMS 2.0+ capable."";
                factory.getClass().getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is JMS 2.0+ capable."";
                jmsContextSupported = true;
            } catch (NoSuchMethodException | SecurityException e) {
            } finally {
                LOG.info(logMessage);
            }

            this.connectionFactory = factory;
        } else {
            throw new IllegalArgumentException(""connectionFactory should implement javax.jms.ConnectionFactory"");
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testFactoryRejectsNonConnectionFactorySet() throws  Exception {
        cf.setConnectionFactory("""");
    }","Here is a method implementation in Java:

public void setConnectionFactory(final Object factory) {
        if (factory instanceof ConnectionFactory) {
            String logMessage = ""JMS ConnectionFactory on classpath is not a JMS 2.0+ version."";
            try {
                ConnectionFactory.class.getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is not JMS 2.0+ capable."";
                factory.getClass().getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is JMS 2.0+ capable."";
                jmsContextSupported = true;
            } catch (NoSuchMethodException | SecurityException e) {
            } finally {
                LOG.info(logMessage);
            }

            this.connectionFactory = factory;
        } else {
            throw new IllegalArgumentException(""connectionFactory should implement javax.jms.ConnectionFactory"");
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public void setConnectionFactory(final Object factory) {
        if (factory instanceof ConnectionFactory) {
            String logMessage = ""JMS ConnectionFactory on classpath is not a JMS 2.0+ version."";
            try {
                ConnectionFactory.class.getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is not JMS 2.0+ capable."";
                factory.getClass().getMethod(""createContext"", int.class);
                logMessage = ""Provided ConnectionFactory implementation is JMS 2.0+ capable."";
                jmsContextSupported = true;
            } catch (NoSuchMethodException | SecurityException e) {
            } finally {
                LOG.info(logMessage);
            }

            this.connectionFactory = factory;
        } else {
            throw new IllegalArgumentException(""connectionFactory should implement javax.jms.ConnectionFactory"");
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import static org.junit.Assert"
"@Override
    public String getMessageSelector() throws JMSException {
        checkClosed();
        return messageConsumer.getMessageSelector();
    }","@Test
    public void testGetMessageSelector() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageConsumer consumer = session.createConsumer(queue, ""Color = Red"");

        assertNotNull(consumer.getMessageSelector());
        assertEquals(""Color = Red"", consumer.getMessageSelector());

        consumer.close();

        try {
            consumer.getMessageSelector();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public String getMessageSelector() throws JMSException {
        checkClosed();
        return messageConsumer.getMessageSelector();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public String getMessageSelector() throws JMSException {
        checkClosed();
        return messageConsumer.getMessageSelector();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class in Java using JUnit:

import"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test(timeout = 10000)
    public void testAnonymousDestinationProducerThrowsIDEWhenNullDestinationIsProvided() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(null);

        Message message = session.createMessage();

        try {
            producer.send(null, message);
            fail(""Expected exception not thrown"");
        } catch (InvalidDestinationException ide) {
            // expected
        }

        try {
            producer.send(null, message, completionListener);
            fail(""Expected exception not thrown"");
        } catch (InvalidDestinationException ide) {
            // expected
        }

        try {
            producer.send(null, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
            fail(""Expected exception not thrown"");
        } catch (InvalidDestinationException ide) {
            // expected
        }

        try {
            producer.send(null, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE, completionListener);
            fail(""Expected exception not thrown"");
        } catch (InvalidDestinationException ide) {
            // expected
        }
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class with test cases to validate the `send`"
"public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierIsntLogicOperatorOr() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierIsntLogicOperator(""OR"");
    }","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `checkIdentifierIsntLogic"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test(timeout = 10000)
    public void testExplicitProducerThrowsUOEWhenExplictDestinationIsProvided() throws Exception {
        Destination dest = new MockJMSQueue(""explicitDestination"");
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(dest);

        Message message = session.createMessage();

        try {
            producer.send(dest, message);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(dest, message, completionListener);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(dest, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(dest, message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE, completionListener);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Sure, here is a full test class with test cases to validate the `send` method"
"@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }","@Test
    public void testRuntimeExceptionFromSendByteBody() throws JMSException {
        JMSProducer producer = context.createProducer();

        MockJMSConnection connection = (MockJMSConnection) context.getConnection();
        connection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                throw new IllegalStateException(""Send Failed"");
            }
        });

        try {
            producer.send(context.createTemporaryQueue(), new byte[0]);
            fail(""Should have thrown an exception"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.

To write a full test class with test cases for the `send` method, you can"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectBoolean() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(Boolean.TRUE);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `checkValidObject` method"
"@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }","@Test(timeout = 60000)
    public void testPooledSessionStatsTwoSessions() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();

        assertEquals(0, connection.getNumActiveSessions());

        // Create Two and check that stats follow
        Session session1 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        Session session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        assertEquals(2, connection.getNumActiveSessions());
        session1.close();
        assertEquals(1, connection.getNumActiveSessions());
        session2.close();

        // All back in the pool now.
        assertEquals(0, connection.getNumActiveSessions());
        assertEquals(2, connection.getNumtIdleSessions());
        assertEquals(2, connection.getNumSessions());

        connection.close();
    }","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java that validates the `close()` method of the `J"
"@Override
    public <T> T receiveBodyNoWait(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }","@Test
    public void testReceiveBodyNoWait() throws JMSException {
        JMSConsumer consumer = context.createConsumer(context.createTemporaryQueue());

        try {
            consumer.receiveBodyNoWait(String.class);
            fail(""Should not be able to interact with closed consumer"");
        } catch (JMSRuntimeException ise) {}
    }","Here is a method implementation in Java:

@Override
    public <T> T receiveBodyNoWait(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public <T> T receiveBodyNoWait(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of how you can write a test class for the `receiveBodyNo"
"@Override
    public Topic getTopic() throws JMSException {
        return getTopicSubscriber().getTopic();
    }","@Test
    public void testGetTopic() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
        Topic topic = session.createTemporaryTopic();
        TopicSubscriber subscriber = session.createSubscriber(topic);

        assertNotNull(subscriber.getTopic());
        assertSame(topic, subscriber.getTopic());

        subscriber.close();

        try {
            subscriber.getTopic();
            fail(""Cannot read topic on closed subscriber"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Topic getTopic() throws JMSException {
        return getTopicSubscriber().getTopic();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Topic getTopic() throws JMSException {
        return getTopicSubscriber().getTopic();
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `getTopic()` method:"
"@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }","@Test
    public void testSendToQueueWithOverrides() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        QueueSender sender = session.createSender(null);

        final AtomicBoolean sent = new AtomicBoolean();
        MockJMSConnection mockConnection = (MockJMSConnection) connection.getConnection();
        mockConnection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                assertEquals(DeliveryMode.PERSISTENT, message.getJMSDeliveryMode());
                assertEquals(9, message.getJMSPriority());
                assertTrue(message.getJMSExpiration() != 0);

                sent.set(true);
            }
        });

        sender.send(queue, session.createTextMessage(), DeliveryMode.PERSISTENT, 9, 100);

        assertTrue(sent.get());
    }","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.

To validate the `send` method defined in the class, we need to create a test"
"@Override
    public <T> T receiveBody(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }","@Test
    public void testReceiveBodyTimed() throws JMSException {
        JMSConsumer consumer = context.createConsumer(context.createTemporaryQueue());

        try {
            consumer.receiveBody(String.class, 1);
            fail(""Should not be able to interact with closed consumer"");
        } catch (JMSRuntimeException ise) {}
    }","Here is a method implementation in Java:

@Override
    public <T> T receiveBody(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public <T> T receiveBody(Class<T> desired) {
        throw new JMSRuntimeException(""Pooled JMSConsumer does not support receiveBody"");
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `receiveBody` method:"
"@Override
    public void close() {
        try {
            consumer.close();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }","@Test
    public void testCloseMoreThanOnce() throws JMSException {
        JMSConsumer consumer = context.createConsumer(context.createTemporaryQueue());

        consumer.close();
        consumer.close();
    }","Here is a method implementation in Java:

@Override
    public void close() {
        try {
            consumer.close();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void close() {
        try {
            consumer.close();
        } catch (JMSException e) {
            throw JMSExceptionSupport.createRuntimeException(e);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java using JUnit:

import static org."
"@Override
    public void close() throws JMSException {
        // ensure session removes consumer from it's list of managed resources.
        if (closed.compareAndSet(false, true)) {
            session.onConsumerClose(messageConsumer);
            messageConsumer.close();
        }
    }","@Test
    public void testCloseMoreThanOnce() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageConsumer consumer = session.createConsumer(queue);

        consumer.close();
        consumer.close();
    }","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        // ensure session removes consumer from it's list of managed resources.
        if (closed.compareAndSet(false, true)) {
            session.onConsumerClose(messageConsumer);
            messageConsumer.close();
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        // ensure session removes consumer from it's list of managed resources.
        if (closed.compareAndSet(false, true)) {
            session.onConsumerClose(messageConsumer);
            messageConsumer.close();
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java that validates the `close` method of the `"
"@Override
    public ConnectionMetaData getMetaData() throws JMSException {
        return getConnection().getMetaData();
    }","@Test(timeout = 60000)
    public void testGetConnectionMetaData() throws Exception {
        Connection connection = cf.createConnection();
        assertNotNull(connection.getMetaData());
    }","Here is a method implementation in Java:

@Override
    public ConnectionMetaData getMetaData() throws JMSException {
        return getConnection().getMetaData();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public ConnectionMetaData getMetaData() throws JMSException {
        return getConnection().getMetaData();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class with test cases for the `getMetaData`"
"public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierIsntLogicOperatorIn() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierIsntLogicOperator(""IN"");
    }","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `checkIdentifierIsntLogic"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetFloatPropertyWithBadPropertyName() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(BAD_PROPERTY_NAME, 100.0f);
            fail(""Should not accept invalid property name"");
        } catch (IllegalArgumentException iae) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `setProperty` method:
"
"@Override
    public boolean propertyExists(String name) {
        return messageProperties.containsKey(name);
    }","@Test
    public void testPropertyExists() {
        JMSProducer producer = context.createProducer();

        producer.setProperty(""Property_1"", ""1"");
        producer.setProperty(""Property_2"", ""2"");
        producer.setProperty(""Property_3"", ""3"");

        assertEquals(3, producer.getPropertyNames().size());

        assertTrue(producer.propertyExists(""Property_1""));
        assertTrue(producer.propertyExists(""Property_2""));
        assertTrue(producer.propertyExists(""Property_3""));
        assertFalse(producer.propertyExists(""Property_4""));
    }","Here is a method implementation in Java:

@Override
    public boolean propertyExists(String name) {
        return messageProperties.containsKey(name);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public boolean propertyExists(String name) {
        return messageProperties.containsKey(name);
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@Override
    public Message receiveNoWait() throws JMSException {
        checkClosed();
        return messageConsumer.receiveNoWait();
    }","@Test
    public void testReceiveNoWait() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        Queue queue = session.createTemporaryQueue();
        MessageConsumer consumer = session.createConsumer(queue, ""Color = Red"");

        assertNull(consumer.receiveNoWait());

        consumer.close();

        try {
            consumer.receiveNoWait();
            fail(""Should not be able to interact with closed consumer"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public Message receiveNoWait() throws JMSException {
        checkClosed();
        return messageConsumer.receiveNoWait();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Message receiveNoWait() throws JMSException {
        checkClosed();
        return messageConsumer.receiveNoWait();
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class with test cases to validate the `receiveNoWait` method"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectByte() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(Byte.MAX_VALUE);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }","@Test
    public void testSendToQueueFailsIfNotAnonymousPublisher() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        QueueSender sender = session.createSender(queue);

        try {
            sender.send(session.createTemporaryQueue(), session.createTextMessage());
            fail(""Should not be able to send to alternate destination"");
        } catch (UnsupportedOperationException ex) {}
    }","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLine) throws JMSException {
        super.send(queue, message, deliveryMode, priority, timeToLine);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `send` method:
"
"public TopicSubscriber getTopicSubscriber() throws JMSException {
        return (TopicSubscriber) super.getMessageConsumer();
    }","@Test
    public void testGetTopicSubscriber() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createTopicConnection();
        TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
        Topic topic = session.createTemporaryTopic();
        JmsPoolTopicSubscriber subscriber = (JmsPoolTopicSubscriber) session.createDurableSubscriber(topic, ""name"", ""color = red"", true);

        assertNotNull(subscriber.getTopicSubscriber());
        assertTrue(subscriber.getTopicSubscriber() instanceof MockJMSTopicSubscriber);

        subscriber.close();

        try {
            subscriber.getTopicSubscriber();
            fail(""Cannot read state on closed subscriber"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

public TopicSubscriber getTopicSubscriber() throws JMSException {
        return (TopicSubscriber) super.getMessageConsumer();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public TopicSubscriber getTopicSubscriber() throws JMSException {
        return (TopicSubscriber) super.getMessageConsumer();
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class in Java using JUnit:

import"
"public boolean isIgnoreClose() {
        return ignoreClose;
    }","@Test(timeout = 60000)
    public void testIsIgnoreClose() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        JmsPoolSession session = (JmsPoolSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        assertFalse(session.isIgnoreClose());
        session.setIgnoreClose(true);
        assertTrue(session.isIgnoreClose());
    }","Here is a method implementation in Java:

public boolean isIgnoreClose() {
        return ignoreClose;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public boolean isIgnoreClose() {
        return ignoreClose;
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `isIgnoreClose` method"
"@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }","@Test(timeout = 60000)
    public void testClose() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        assertEquals(0, connection.getNumtIdleSessions());
        session.close();
        assertEquals(1, connection.getNumtIdleSessions());

        try {
            session.close();
        } catch (JMSException ex) {
            fail(""Shouldn't fail on second close call."");
        }

        try {
            session.createTemporaryQueue();
            fail(""Session should be closed."");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a test class in Java:

import javax.jms"
"public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }","@Test(expected = TransactionInProgressRuntimeException.class)
    public void testConvertsTransactionInProgressExceptionToTransactionInProgressRuntimeException() {
        throw JMSExceptionSupport.createRuntimeException(new TransactionInProgressException(""error""));
    }","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java:

import org.junit.j"
"public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }","@Test(expected = IllegalArgumentException.class)
    public void testCheckIdentifierIsntLogicOperatorBetween() throws JMSException {
        JMSMessagePropertySupport.checkIdentifierIsntLogicOperator(""BETWEEN"");
    }","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkIdentifierIsntLogicOperator(String identifier) {
        // Identifiers cannot be NOT, AND, OR, BETWEEN, LIKE, IN, IS, or ESCAPE.
        if (""NOT"".equals(identifier) || ""AND"".equals(identifier) || ""OR"".equals(identifier) ||
            ""BETWEEN"".equals(identifier) || ""LIKE"".equals(identifier) || ""IN"".equals(identifier) ||
            ""IS"".equals(identifier) || ""ESCAPE"".equals(identifier)) {

            throw new IllegalArgumentException(""Identifier not allowed in JMS: '"" + identifier + ""'"");
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that tests the `checkIdentifierIsntLogicOperator"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectString() throws JMSException {
        JMSMessagePropertySupport.checkValidObject("""");
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test(timeout = 10000)
    public void testAnonymousProducerThrowsUOEWhenExplictDestinationNotProvided() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(null);

        Message message = session.createMessage();
        try {
            producer.send(message);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(message, completionListener);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }

        try {
            producer.send(message, Message.DEFAULT_DELIVERY_MODE, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE, completionListener);
            fail(""Expected exception not thrown"");
        } catch (UnsupportedOperationException uoe) {
            // expected
        }
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `send` method:
"
"@Override
    public short getShortProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Short.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test
    public void testGetShortProperty() {
        JMSProducer producer = context.createProducer();
        producer.setProperty(SHORT_PROPERTY_NAME, SHORT_PROPERTY_VALUE);
        assertEquals(SHORT_PROPERTY_VALUE, producer.getShortProperty(SHORT_PROPERTY_NAME));
    }","Here is a method implementation in Java:

@Override
    public short getShortProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Short.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public short getShortProperty(String name) {
        try {
            return convertPropertyTo(name, messageProperties.get(name), Short.class);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

To write a full test class with test cases to validate the `getShortProperty` method"
"@Override
    public Queue createQueue(String queueName) {
        try {
            return getSession().createQueue(queueName);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateQueue() {
        JMSContext context = cf.createContext();
        assertNotNull(context.createQueue(getTestName()));

        context.close();
        try {
            context.createQueue(getTestName());
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public Queue createQueue(String queueName) {
        try {
            return getSession().createQueue(queueName);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public Queue createQueue(String queueName) {
        try {
            return getSession().createQueue(queueName);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class in Java using JUnit:

import"
"@Override
    public void recover() {
        try {
            getSession().recover();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testRecover() {
        JmsPoolJMSContext context = (JmsPoolJMSContext) cf.createContext();

        context.recover();
        context.close();

        try {
            context.recover();
            fail(""Cannot recover from a closed resource"");
        } catch (JMSRuntimeException jmsre) {}
    }","Here is a method implementation in Java:

@Override
    public void recover() {
        try {
            getSession().recover();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void recover() {
        try {
            getSession().recover();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `recover()` method:
"
"public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateMessageEOFExceptionDoesNotFillLinkedExceptionWhenGivenNonExceptionThrowable() {
        JMSException result = JMSExceptionSupport.createMessageEOFException(new AssertionError(CAUSE_MESSAGE));
        assertNull(result.getLinkedException());
    }","Here is a method implementation in Java:

public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static MessageEOFException createMessageEOFException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageEOFException exception = new MessageEOFException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }","@Test(expected = InvalidDestinationRuntimeException.class)
    public void testConvertsInvalidDestinationExceptionToInvalidDestinationRuntimeException() {
        throw JMSExceptionSupport.createRuntimeException(new InvalidDestinationException(""error""));
    }","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSRuntimeException createRuntimeException(Exception exception) {
        JMSRuntimeException result = null;
        JMSException source = null;

        if (!(exception instanceof JMSException)) {
            throw new JMSRuntimeException(exception.getMessage(), null, exception);
        } else {
            source = (JMSException) exception;
        }

        if (source instanceof IllegalStateException) {
            result = new IllegalStateRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidClientIDException) {
            result = new InvalidClientIDRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidDestinationException) {
            result = new InvalidDestinationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof InvalidSelectorException) {
            result = new InvalidSelectorRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof JMSSecurityException) {
            result = new JMSSecurityRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageFormatException) {
            result = new MessageFormatRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof MessageNotWriteableException) {
            result = new MessageNotWriteableRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof ResourceAllocationException) {
            result = new ResourceAllocationRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionInProgressException) {
            result = new TransactionInProgressRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else if (source instanceof TransactionRolledBackException) {
            result = new TransactionRolledBackRuntimeException(source.getMessage(), source.getErrorCode(), source);
        } else {
            result = new JMSRuntimeException(source.getMessage(), source.getErrorCode(), source);
        }

        return result;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"@Override
    public JMSProducer createProducer() {
        if (connectionRefCount.get() == 0) {
            throw new IllegalStateRuntimeException(""The Connection is closed"");
        }

        try {
            if (sharedProducer == null) {
                synchronized (this) {
                    if (sharedProducer == null) {
                        sharedProducer = (JmsPoolMessageProducer) getSession().createProducer(null);
                    }
                }
            }

            return new JmsPoolJMSProducer(getSession(), sharedProducer);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateProducer() {
        JMSContext context = cf.createContext();
        assertNotNull(context.createProducer());
        assertNotNull(context.createProducer());

        context.close();
        try {
            context.createProducer();
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer createProducer() {
        if (connectionRefCount.get() == 0) {
            throw new IllegalStateRuntimeException(""The Connection is closed"");
        }

        try {
            if (sharedProducer == null) {
                synchronized (this) {
                    if (sharedProducer == null) {
                        sharedProducer = (JmsPoolMessageProducer) getSession().createProducer(null);
                    }
                }
            }

            return new JmsPoolJMSProducer(getSession(), sharedProducer);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer createProducer() {
        if (connectionRefCount.get() == 0) {
            throw new IllegalStateRuntimeException(""The Connection is closed"");
        }

        try {
            if (sharedProducer == null) {
                synchronized (this) {
                    if (sharedProducer == null) {
                        sharedProducer = (JmsPoolMessageProducer) getSession().createProducer(null);
                    }
                }
            }

            return new JmsPoolJMSProducer(getSession(), sharedProducer);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `createProducer` method:"
"@Override
    public boolean getTransacted() {
        return sessionMode == JMSContext.SESSION_TRANSACTED;
    }","@Test(timeout = 30000)
    public void testGetTransacted() {
        JmsPoolJMSContext context1 = (JmsPoolJMSContext) cf.createContext();
        JmsPoolJMSContext context2 = (JmsPoolJMSContext) context1.createContext(Session.SESSION_TRANSACTED);

        assertFalse(context1.getTransacted());
        assertTrue(context2.getTransacted());
    }","Here is a method implementation in Java:

@Override
    public boolean getTransacted() {
        return sessionMode == JMSContext.SESSION_TRANSACTED;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public boolean getTransacted() {
        return sessionMode == JMSContext.SESSION_TRANSACTED;
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class in Java that validates the `getTransacted` method"
"@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }","@Test(timeout = 60000)
    public void testPooledSessionStatsOneSessionWithSessionLimit() throws Exception {
        cf.setMaxSessionsPerConnection(1);
        cf.setBlockIfSessionPoolIsFull(false);

        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();

        assertEquals(0, connection.getNumActiveSessions());

        // Create one and check that stats follow
        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        assertEquals(1, connection.getNumActiveSessions());
        assertEquals(0, connection.getNumtIdleSessions());
        assertEquals(1, connection.getNumSessions());

        try {
            connection.createSession();
            fail(""Should not be able to create new session"");
        } catch (IllegalStateException ise) {}

        // Nothing should have changed as we didn't create anything.
        assertEquals(1, connection.getNumActiveSessions());
        assertEquals(0, connection.getNumtIdleSessions());
        assertEquals(1, connection.getNumSessions());

        session.close();

        // All back in the pool now
        assertEquals(0, connection.getNumActiveSessions());
        assertEquals(1, connection.getNumtIdleSessions());
        assertEquals(1, connection.getNumSessions());

        connection.close();
    }","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void close() throws JMSException {
        if (ignoreClose) {
            return;
        }

        if (closed.compareAndSet(false, true)) {
            boolean invalidate = false;
            try {
                // lets reset the session
                getInternalSession().setMessageListener(null);

                // Close any consumers, producers and browsers that may have been created.
                for (MessageConsumer consumer : consumers) {
                    consumer.close();
                }

                for (QueueBrowser browser : browsers) {
                    browser.close();
                }

                for (MessageProducer producer : producers) {
                    producer.close();
                }

                consumers.clear();
                producers.clear();
                browsers.clear();

                if (transactional && !isXa) {
                    try {
                        getInternalSession().rollback();
                    } catch (JMSException e) {
                        invalidate = true;
                        LOG.warn(""Caught exception trying rollback() when putting session back into the pool, will invalidate. "" + e, e);
                    }
                }
            } catch (JMSException ex) {
                invalidate = true;
                LOG.warn(""Caught exception trying close() when putting session back into the pool, will invalidate. "" + ex, ex);
            } finally {
                consumers.clear();
                browsers.clear();
                for (JmsPoolSessionEventListener listener : this.sessionEventListeners) {
                    listener.onSessionClosed(this);
                }
                sessionEventListeners.clear();
            }

            if (invalidate) {
                // lets close the session and not put the session back into the pool
                // instead invalidate it so the pool can create a new one on demand.
                if (sessionHolder != null) {
                    try {
                        sessionHolder.close();
                    } catch (JMSException e1) {
                        LOG.trace(""Ignoring exception on close as discarding session: "" + e1, e1);
                    }
                }

                try {
                    sessionPool.invalidateObject(key, sessionHolder);
                } catch (Exception e) {
                    LOG.trace(""Ignoring exception on invalidateObject as discarding session: "" + e, e);
                }
            } else {
                try {
                    sessionPool.returnObject(key, sessionHolder);
                } catch (Exception e) {
                    javax.jms.IllegalStateException illegalStateException = new javax.jms.IllegalStateException(e.toString());
                    illegalStateException.initCause(e);
                    throw illegalStateException;
                }
            }

            sessionHolder = null;
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a test class in Java using JUnit:

import static"
"@Override
    public JMSProducer clearProperties() {
        messageProperties.clear();
        return this;
    }","@Test
    public void testClearProperties() {
        JMSProducer producer = context.createProducer();

        producer.setProperty(""Property_1"", ""1"");
        producer.setProperty(""Property_2"", ""2"");
        producer.setProperty(""Property_3"", ""3"");

        assertEquals(3, producer.getPropertyNames().size());

        producer.clearProperties();

        assertEquals(0, producer.getPropertyNames().size());
    }","Here is a method implementation in Java:

@Override
    public JMSProducer clearProperties() {
        messageProperties.clear();
        return this;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer clearProperties() {
        messageProperties.clear();
        return this;
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of how you might write a test class for the `clearProperties`"
"public void addSessionEventListener(JmsPoolSessionEventListener listener) throws JMSException {
        checkClosed();
        if (!sessionEventListeners.contains(listener)) {
            this.sessionEventListeners.add(listener);
        }
    }","@Test(timeout = 60000)
    public void testAddSessionEventListener() throws Exception {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createConnection();
        JmsPoolSession session = (JmsPoolSession) connection.createSession();

        final CountDownLatch tempTopicCreated = new CountDownLatch(2);
        final CountDownLatch tempQueueCreated = new CountDownLatch(2);
        final CountDownLatch sessionClosed = new CountDownLatch(2);

        JmsPoolSessionEventListener listener = new JmsPoolSessionEventListener() {

            @Override
            public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
                tempTopicCreated.countDown();
            }

            @Override
            public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
                tempQueueCreated.countDown();
            }

            @Override
            public void onSessionClosed(JmsPoolSession session) {
                sessionClosed.countDown();
            }
        };

        session.addSessionEventListener(listener);
        session.addSessionEventListener(listener);

        assertNotNull(session.createTemporaryQueue());
        assertNotNull(session.createTemporaryTopic());

        session.close();

        assertEquals(1, tempQueueCreated.getCount());
        assertEquals(1, tempTopicCreated.getCount());
        assertEquals(1, sessionClosed.getCount());

        try {
            session.addSessionEventListener(listener);
            fail(""Should throw on closed session."");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

public void addSessionEventListener(JmsPoolSessionEventListener listener) throws JMSException {
        checkClosed();
        if (!sessionEventListeners.contains(listener)) {
            this.sessionEventListeners.add(listener);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public void addSessionEventListener(JmsPoolSessionEventListener listener) throws JMSException {
        checkClosed();
        if (!sessionEventListeners.contains(listener)) {
            this.sessionEventListeners.add(listener);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import static org.junit.j"
"public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateFillsMessageFromCauseMessageParamWhenErrorMessageIsNull() {
        JMSException result = JMSExceptionSupport.create(null, new IOException(CAUSE_MESSAGE));
        assertEquals(CAUSE_MESSAGE, result.getMessage());
    }","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static JMSException create(String message, Throwable cause) {
        if (cause instanceof JMSException) {
            return (JMSException) cause;
        }

        if (cause.getCause() instanceof JMSException) {
            return (JMSException) cause.getCause();
        }

        if (message == null || message.isEmpty()) {
            message = cause.getMessage();
            if (message == null || message.isEmpty()) {
                message = cause.toString();
            }
        }

        JMSException exception = new JMSException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here is a test class in Java:

import static org.junit.Assert.*;"
"@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }","@Test
    public void testNullDestinationOnSendToAnonymousProducer() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        Session session = connection.createSession();
        MessageProducer producer = session.createProducer(null);

        try {
            producer.send(null, session.createMessage());
            fail(""Should not be able to send with null destination"");
        } catch (InvalidDestinationException ide) {}
    }","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public void send(Message message) throws JMSException {
        send(message, deliveryMode, priority, timeToLive);
    }

Write a full test class with test cases to validate the method defined above.

Sure, here is a full test class in Java using JUnit to validate the `send"
"@Override
    public JMSConsumer createDurableConsumer(Topic topic, String name) {
        try {
            return startIfNeeded(new JmsPoolJMSConsumer((JmsPoolMessageConsumer) getSession().createDurableConsumer(topic, name)));
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateDurableConsumer() {
        JMSContext context = cf.createContext();
        Topic topic = context.createTopic(getTestName());
        assertNotNull(context.createDurableConsumer(topic, ""test""));

        context.close();
        try {
            context.createDurableConsumer(topic, ""test"");
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public JMSConsumer createDurableConsumer(Topic topic, String name) {
        try {
            return startIfNeeded(new JmsPoolJMSConsumer((JmsPoolMessageConsumer) getSession().createDurableConsumer(topic, name)));
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSConsumer createDurableConsumer(Topic topic, String name) {
        try {
            return startIfNeeded(new JmsPoolJMSConsumer((JmsPoolMessageConsumer) getSession().createDurableConsumer(topic, name)));
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

To write a full test class with test cases for the `createDurableConsumer` method"
"@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }","@Test
    public void testSetLongPropertyWithBadPropertyName() {
        JMSProducer producer = context.createProducer();

        try {
            producer.setProperty(BAD_PROPERTY_NAME, 100L);
            fail(""Should not accept invalid property name"");
        } catch (IllegalArgumentException iae) {}
    }","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer setProperty(String name, boolean value) {
        return setObjectProperty(name, value);
    }

Write a full test class with test cases to validate the method defined above.

Here's a full test class with test cases to validate the `setProperty` method:"
"public static MessageFormatException createMessageFormatException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageFormatException exception = new MessageFormatException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }","@Test
    public void testCreateMessageFormatExceptionDoesNotFillLinkedExceptionWhenGivenNonExceptionThrowable() {
        JMSException result = JMSExceptionSupport.createMessageFormatException(new AssertionError(CAUSE_MESSAGE));
        assertNull(result.getLinkedException());
    }","Here is a method implementation in Java:

public static MessageFormatException createMessageFormatException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageFormatException exception = new MessageFormatException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static MessageFormatException createMessageFormatException(Throwable cause) {
        String message = cause.getMessage();
        if (message == null || message.length() == 0) {
            message = cause.toString();
        }

        MessageFormatException exception = new MessageFormatException(message);
        if (cause instanceof Exception) {
            exception.setLinkedException((Exception) cause);
        }
        exception.initCause(cause);
        return exception;
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java:

import org.junit.jupiter"
"public QueueReceiver getQueueReceiver() throws JMSException {
        return (QueueReceiver) super.getMessageConsumer();
    }","@Test
    public void testGetTopicSubscriber() throws JMSException {
        JmsPoolConnection connection = (JmsPoolConnection) cf.createQueueConnection();
        QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
        Queue queue = session.createTemporaryQueue();
        JmsPoolQueueReceiver receiver = (JmsPoolQueueReceiver) session.createReceiver(queue);

        assertNotNull(receiver.getQueueReceiver());
        assertTrue(receiver.getQueueReceiver() instanceof MockJMSQueueReceiver);

        receiver.close();

        try {
            receiver.getQueueReceiver();
            fail(""Cannot read state on closed receiver"");
        } catch (IllegalStateException ise) {}
    }","Here is a method implementation in Java:

public QueueReceiver getQueueReceiver() throws JMSException {
        return (QueueReceiver) super.getMessageConsumer();
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public QueueReceiver getQueueReceiver() throws JMSException {
        return (QueueReceiver) super.getMessageConsumer();
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that validates the `getQueueReceiver` method:"
"@Override
    public MapMessage createMapMessage() {
        try {
            return getSession().createMapMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }","@Test(timeout = 30000)
    public void testCreateMapMessage() {
        JMSContext context = cf.createContext();
        assertNotNull(context.createMapMessage());

        context.close();
        try {
            context.createMapMessage();
            fail(""Should not be able to create resource when context is closed"");
        } catch (IllegalStateRuntimeException isre) {}
    }","Here is a method implementation in Java:

@Override
    public MapMessage createMapMessage() {
        try {
            return getSession().createMapMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public MapMessage createMapMessage() {
        try {
            return getSession().createMapMessage();
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }
    }

Write a full test class with test cases to validate the method defined above.

Here is a full test class in Java that validates the `createMapMessage` method:"
"public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }","@Test
    public void testCheckValidObjectNull() throws JMSException {
        JMSMessagePropertySupport.checkValidObject(null);
    }","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

public static void checkValidObject(Object value) throws MessageFormatException {
        boolean valid = value instanceof Boolean ||
                        value instanceof Byte ||
                        value instanceof Short ||
                        value instanceof Integer ||
                        value instanceof Long ||
                        value instanceof Float ||
                        value instanceof Double ||
                        value instanceof Character ||
                        value instanceof String ||
                        value == null;

        if (!valid) {
            throw new MessageFormatException(""Only objectified primitive objects and String types are allowed but was: "" + value + "" type: "" + value.getClass());
        }
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class in Java that uses JUnit to validate the `checkValid"
"@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }","@Test
    public void testMapBodyIsApplied() throws JMSException {
        JMSProducer producer = context.createProducer();

        final Map<String, Object> bodyValue = new HashMap<String, Object>();

        bodyValue.put(""Value-1"", ""First"");
        bodyValue.put(""Value-2"", ""Second"");

        final AtomicBoolean bodyValidated = new AtomicBoolean();

        MockJMSConnection connection = (MockJMSConnection) context.getConnection();
        connection.addConnectionListener(new MockJMSDefaultConnectionListener() {

            @Override
            public void onMessageSend(MockJMSSession session, MockJMSMessageProducer producer, Message message) throws JMSException {
                assertEquals(bodyValue, message.getBody(Map.class));
                bodyValidated.set(true);
            }
        });

        producer.send(JMS_DESTINATION, bodyValue);
        assertTrue(bodyValidated.get());
    }","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@Override
    public JMSProducer send(Destination destination, Message message) {
        try {
            doSend(destination, message);
        } catch (JMSException jmse) {
            throw JMSExceptionSupport.createRuntimeException(jmse);
        }

        return this;
    }

Write a full test class with test cases to validate the method defined above.

Here is an example of a full test class in Java using JUnit:

import"
"@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }","@Test
    public void testConvertPropertyToNullStringTarget() throws JMSException {
        assertNull(JMSMessagePropertySupport.convertPropertyTo(""string"", null, String.class));
    }","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.","Here is a method implementation in Java:

@SuppressWarnings(""unchecked"")
    public static <T> T convertPropertyTo(String name, Object value, Class<T> target) throws JMSException {
        if (value == null) {
            if (Boolean.class.equals(target)) {
                return (T) Boolean.FALSE;
            } else if (Float.class.equals(target) || Double.class.equals(target)) {
                throw new NullPointerException(""property "" + name + "" was null"");
            } else if (Number.class.isAssignableFrom(target)) {
                throw new NumberFormatException(""property "" + name + "" was null"");
            } else {
                return null;
            }
        }

        T rc = (T) TypeConversionSupport.convert(value, target);
        if (rc == null) {
            throw new MessageFormatException(""Property "" + name + "" was a "" + value.getClass().getName() + "" and cannot be read as a "" + target.getName());
        }

        return rc;
    }

Write a full test class with test cases to validate the method defined above.

Here's a test class for the `convertPropertyTo` method:

import"
