instructions,source_path,target_path,ast_path
"/**
    Check if in given list of numbers, are any two numbers closer to each other than given threshold.
    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)
    false
    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
    true
     */",sources/Java/0.java,targets/Java/0.java,AST/Java/0.ast
"/**
    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separateParenGroups(""( ) (( )) (( )( ))"")
    [""()"", ""(())"", ""(()())""]
     */",sources/Java/1.java,targets/Java/1.java,AST/Java/1.ast
"/**
    Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncateNumber(3.5)
    0.5
     */",sources/Java/2.java,targets/Java/2.java,AST/Java/2.ast
"/**
    You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> belowZero(Arrays.asList(1, 2, 3))
    false
    >>> belowZero(Arrays.asList(1, 2, -4, 5))
    true
     */",sources/Java/3.java,targets/Java/3.java,AST/Java/3.ast
"/**
    For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))
    1.0
     */",sources/Java/4.java,targets/Java/4.java,AST/Java/4.ast
"/**
    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse(List.of(), 4)
    []
    >>> intersperse(Arrays.asList(1, 2, 3), 4)
    [1, 4, 2, 4, 3]
     */",sources/Java/5.java,targets/Java/5.java,AST/Java/5.ast
"/**
    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parseNestedParens(""(()()) ((())) () ((())()())"")
    [2, 3, 1, 3]
     */",sources/Java/6.java,targets/Java/6.java,AST/Java/6.ast
"/**
    Filter an input list of strings only for ones that contain given substring
    >>> filterBySubstring(List.of(), ""a"")
    []
    >>> filterBySubstring(Arrays.asList(""abc"", ""bacd"", ""cde"", ""array""), ""a"")
    [""abc"", ""bacd"", ""array""]
     */",sources/Java/7.java,targets/Java/7.java,AST/Java/7.ast
"/**
    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sumProduct(List.of())
    [0, 1]
    >>> sumProduct(Arrays.asList(1, 2, 3, 4))
    [10, 24]
     */",sources/Java/8.java,targets/Java/8.java,AST/Java/8.ast
"/**
    From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))
    [1, 2, 3, 3, 3, 4, 4]
     */",sources/Java/9.java,targets/Java/9.java,AST/Java/9.ast
"/**
    Test if given string is a palindrome
     */",sources/Java/10.java,targets/Java/10.java,AST/Java/10.ast
"/**
    Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> stringXor(""010"", ""110"")
    ""100""
     */",sources/Java/11.java,targets/Java/11.java,AST/Java/11.ast
"/**
    Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest(List.of())
    Optional.empty
    >>> longest(Arrays.asList(""a"", ""b"", ""c""))
    Optional[a]
    >>> longest(Arrays.asList(""a"", ""bb"", ""ccc""))
    Optional[ccc]
     */",sources/Java/12.java,targets/Java/12.java,AST/Java/12.ast
"/**
    Return a greatest common divisor of two integers a and b
    >>> greatestCommonDivisor(3, 5)
    1
    >>> greatestCommonDivisor(25, 15)
    5
     */",sources/Java/13.java,targets/Java/13.java,AST/Java/13.ast
"/**
    Return list of all prefixes from shortest to longest of the input string
    >>> allPrefixes(""abc"")
    [""a"", ""ab"", ""abc""]
     */",sources/Java/14.java,targets/Java/14.java,AST/Java/14.ast
"/**
    Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> stringSequence(0)
    ""0""
    >>> stringSequence(5)
    ""0 1 2 3 4 5""
     */",sources/Java/15.java,targets/Java/15.java,AST/Java/15.ast
"/**
    Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> countDistinctCharacters(""xyzXYZ"")
    3
    >>> countDistinctCharacters(""Jerry"")
    4
     */",sources/Java/16.java,targets/Java/16.java,AST/Java/16.ast
"/**
    Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    ""o"" - whole note, lasts four beats
    ""o|"" - half note, lasts two beats
    "".|"" - quater note, lasts one beat

    >>> parseMusic(""o o| .| o| o| .| .| .| .| o o"")
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
     */",sources/Java/17.java,targets/Java/17.java,AST/Java/17.ast
"/**
    Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> howManyTimes("""", ""a"")
    0
    >>> howManyTimes(""aaa"", ""a"")
    3
    >>> howManyTimes(""aaaa"", ""aa"")
    3
     */",sources/Java/18.java,targets/Java/18.java,AST/Java/18.ast
"/**
    Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sortNumbers(""three one five"")
    ""one three five""
     */",sources/Java/19.java,targets/Java/19.java,AST/Java/19.ast
"/**
    From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))
    [2.0, 2.2]
    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))
    [2.0, 2.0]
     */",sources/Java/20.java,targets/Java/20.java,AST/Java/20.ast
"/**
    Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))
    [0.0, 0.25, 0.5, 0.75, 1.0]
     */",sources/Java/21.java,targets/Java/21.java,AST/Java/21.ast
"/**
    Filter given list of any values only for integers
    >>> filter_integers(Arrays.asList('a', 3.14, 5))
    [5]
    >>> filter_integers(Arrays.asList(1, 2, 3, ""abc"", Map.of(), List.of()))
    [1, 2, 3]
     */",sources/Java/22.java,targets/Java/22.java,AST/Java/22.ast
"/**
    Return length of given string
    >>> strlen("""")
    0
    >>> strlen(""abc"")
    3
     */",sources/Java/23.java,targets/Java/23.java,AST/Java/23.ast
"/**
    For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largestDivisor(15)
    5
     */",sources/Java/24.java,targets/Java/24.java,AST/Java/24.ast
"/**
    Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
     */",sources/Java/25.java,targets/Java/25.java,AST/Java/25.ast
"/**
    From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))
    [1, 3, 4]
     */",sources/Java/26.java,targets/Java/26.java,AST/Java/26.ast
"/**
    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flipCase(""Hello"")
    ""hELLO""
     */",sources/Java/27.java,targets/Java/27.java,AST/Java/27.ast
"/**
    Concatenate list of strings into a single string
    >>> concatenate(List.of())
    """"
    >>> concatenate(Arrays.asList(""a"", ""b"", ""c""))
    ""abc""
     */",sources/Java/28.java,targets/Java/28.java,AST/Java/28.ast
"/**
    Filter an input list of strings only for ones that start with a given prefix.
    >>> filterByPrefix(List.of(), ""a"")
    []
    >>> filterByPrefix(Arrays.asList(""abc"", ""bcd"", ""cde"", ""array""), ""a"")
    [""abc"", ""array""]
     */",sources/Java/29.java,targets/Java/29.java,AST/Java/29.ast
"/**
    Return only positive numbers in the list.
    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))
    [2, 5, 6]
    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
    [5, 3, 2, 3, 9, 123, 1]
     */",sources/Java/30.java,targets/Java/30.java,AST/Java/30.ast
"/**
    Return true if a given number is prime, and false otherwise.
    >>> isPrime(6)
    false
    >>> isPrime(101)
    true
    >>> isPrime(11)
    true
    >>> isPrime(13441)
    true
    >>> isPrime(61)
    true
    >>> isPrime(4)
    false
    >>> isPrime(1)
    false
     */",sources/Java/31.java,targets/Java/31.java,AST/Java/31.ast
"/**
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
     */",sources/Java/32.java,targets/Java/32.java,AST/Java/32.ast
"/**
    This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sortThird(Arrays.asList(1, 2, 3))
    [1, 2, 3]
    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))
    [2, 6, 3, 4, 8, 9, 5]
     */",sources/Java/33.java,targets/Java/33.java,AST/Java/33.ast
"/**
    Return sorted unique elements in a list
    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))
    [0, 2, 3, 5, 9, 123]
     */",sources/Java/34.java,targets/Java/34.java,AST/Java/34.ast
"/**
    Return maximum element in the list.
    >>> maxElement(Arrays.asList(1, 2, 3))
    3
    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
    123
     */",sources/Java/35.java,targets/Java/35.java,AST/Java/35.ast
"/**
    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizzBuzz(50)
    0
    >>> fizzBuzz(78)
    2
    >>> fizzBuzz(79)
    3
     */",sources/Java/36.java,targets/Java/36.java,AST/Java/36.ast
"/**
    This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sortEven(Arrays.asList(1, 2, 3))
    [1, 2, 3]
    >>> sortEven(Arrays.asList(5, 6, 3, 4))
    [3, 6, 5, 4]
     */",sources/Java/37.java,targets/Java/37.java,AST/Java/37.ast
"/**
    returns encoded string by cycling groups of three characters.
     */",sources/Java/38.java,targets/Java/38.java,AST/Java/38.ast
"/**
    primeFib returns n-th number that is a Fibonacci number and it's also prime.
    >>> primeFib(1)
    2
    >>> primeFib(2)
    3
    >>> primeFib(3)
    5
    >>> primeFib(4)
    13
    >>> primeFib(5)
    89
     */",sources/Java/39.java,targets/Java/39.java,AST/Java/39.ast
"/**
    triplesSumToZero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))
    false
    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))
    true
    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))
    false
    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))
    true
    >>> triplesSumToZero(Arrays.asList(1))
    false
     */",sources/Java/40.java,targets/Java/40.java,AST/Java/40.ast
"/**
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
     */",sources/Java/41.java,targets/Java/41.java,AST/Java/41.ast
"/**
    Return list with elements incremented by 1.
    >>> incrList(Arrays.asList(1, 2, 3))
    [2, 3, 4]
    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
     */",sources/Java/42.java,targets/Java/42.java,AST/Java/42.ast
"/**
    pairsSumToZero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))
    false
    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))
    false
    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))
    false
    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))
    true
    >>> pairsSumToZero(Arrays.asList(1))
    false
     */",sources/Java/43.java,targets/Java/43.java,AST/Java/43.ast
"/**
    Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> changeBase(8, 3)
    ""22""
    >>> changeBase(8, 2)
    ""1000""
    >>> changeBase(7, 2)
    ""111""
     */",sources/Java/44.java,targets/Java/44.java,AST/Java/44.ast
"/**
    Given length of a side and high return area for a triangle.
    >>> triangleArea(5, 3)
    7.5
     */",sources/Java/45.java,targets/Java/45.java,AST/Java/45.ast
"/**
    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
     */",sources/Java/46.java,targets/Java/46.java,AST/Java/46.ast
"/**
    Return median of elements in the list l.
    >>> median(Arrays.asList(3, 1, 2, 4, 5))
    3
    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))
    15.0
     */",sources/Java/47.java,targets/Java/47.java,AST/Java/47.ast
"/**
    Checks if given string is a palindrome
    >>> isPalindrome("""")
    true
    >>> isPalindrome(""aba"")
    true
    >>> isPalindrome(""aaaaa"")
    true
    >>> isPalindrome(""zbcd"")
    false
     */",sources/Java/48.java,targets/Java/48.java,AST/Java/48.ast
"/**
    Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
     */",sources/Java/49.java,targets/Java/49.java,AST/Java/49.ast
"/**
    returns encoded string by shifting every character by 5 in the alphabet.
     */",sources/Java/50.java,targets/Java/50.java,AST/Java/50.ast
"/**
    removeVowels is a function that takes string and returns string without vowels.
    >>> removeVowels("""")
    """"
    >>> removeVowels(""abcdef\nghijklm"")
    ""bcdf\nghjklm""
    >>> removeVowels(""abcdef"")
    ""bcdf""
    >>> removeVowels(""aaaaa"")
    """"
    >>> removeVowels(""aaBAA"")
    ""B""
    >>> removeVowels(""zbcd"")
    ""zbcd""
     */",sources/Java/51.java,targets/Java/51.java,AST/Java/51.ast
"/**
    Return True if all numbers in the list l are below threshold t.
    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)
    true
    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)
    false
     */",sources/Java/52.java,targets/Java/52.java,AST/Java/52.ast
"/**
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
     */",sources/Java/53.java,targets/Java/53.java,AST/Java/53.ast
"/**
    Check if two words have the same characters.
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
    true
    >>> sameChars(""abcd"", ""dddddddabc"")
    true
    >>> sameChars(""dddddddabc"", ""abcd"")
    true
    >>> sameChars(""eabcd"", ""dddddddabc"")
    false
    >>> sameChars(""abcd"", ""dddddddabce"")
    false
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
    false
     */",sources/Java/54.java,targets/Java/54.java,AST/Java/54.ast
"/**
    Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
     */",sources/Java/55.java,targets/Java/55.java,AST/Java/55.ast
"/**
    brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.
    
    >>> correctBracketing(""<"")
    false
    >>> correctBracketing(""<>"")
    true
    >>> correctBracketing(""<<><>>"")
    true
    >>> correctBracketing(""><<>"")
    false
     */",sources/Java/56.java,targets/Java/56.java,AST/Java/56.ast
"/**
    Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic(Arrays.asList(1, 2, 4, 20))
    true
    >>> monotonic(Arrays.asList(1, 20, 4, 10))
    false
    >>> monotonic(Arrays.asList(4, 1, 0, -10))
    true
     */",sources/Java/57.java,targets/Java/57.java,AST/Java/57.ast
"/**
    Return sorted unique common elements for two lists.
    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))
    [1, 5, 653]
    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))
    [2, 3]
     */",sources/Java/58.java,targets/Java/58.java,AST/Java/58.ast
"/**
    Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largestPrimeFactor(13195)
    29
    >>> largestPrimeFactor(2048)
    2
     */",sources/Java/59.java,targets/Java/59.java,AST/Java/59.ast
"/**
    sumToN is a function that sums numbers from 1 to n.
    >>> sumToN(30)
    465
    >>> sumToN(100)
    5050
    >>> sumToN(5)
    15
    >>> sumToN(10)
    55
    >>> sumToN(1)
    1
     */",sources/Java/60.java,targets/Java/60.java,AST/Java/60.ast
"/**
    brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correctBracketing(""("")
    false
    >>> correctBracketing(""()"")
    true
    >>> correctBracketing(""(()())"")
    true
    >>> correctBracketing("")(()"")
    false
     */",sources/Java/61.java,targets/Java/61.java,AST/Java/61.ast
"/**
    xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))
    [1, 4, 12, 20]
    >>> derivative(Arrays.asList(1, 2, 3]))
    [2, 6]
     */",sources/Java/62.java,targets/Java/62.java,AST/Java/62.ast
"/**
    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
     */",sources/Java/63.java,targets/Java/63.java,AST/Java/63.ast
"/**
    Write a function vowelsCount which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowelsCount(""abcde"")
    2
    >>> vowelsCount(""ACEDY"")
    3
     */",sources/Java/64.java,targets/Java/64.java,AST/Java/64.ast
"/**
    Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circularShift(12, 1)
    ""21""
    >>> circularShift(12, 2)
    ""12""
     */",sources/Java/65.java,targets/Java/65.java,AST/Java/65.ast
"/**
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
     */",sources/Java/66.java,targets/Java/66.java,AST/Java/66.ast
"/**
    In this task, you will be given a string that represents a number of apples and oranges
    that are distributed in a basket of fruit this basket contains
    apples, oranges, and mango fruits. Given the string that represents the total number of
    the oranges and apples and an integer that represent the total number of the fruits
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     */",sources/Java/67.java,targets/Java/67.java,AST/Java/67.ast
"/**
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 3:
        Input: []
        Output: []

    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
     */",sources/Java/68.java,targets/Java/68.java,AST/Java/68.ast
"/**
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than
    zero, and has a frequency greater than or equal to the value of the integer itself.
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2
        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3
        search(Arrays.asList(5, 5, 4, 4, 4)) == -1
     */",sources/Java/69.java,targets/Java/69.java,AST/Java/69.ast
"/**
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)
    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)
    strangeSortList(Arrays.asList()) == Arrays.asList()
     */",sources/Java/70.java,targets/Java/70.java,AST/Java/70.ast
"/**
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle.
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater
    than the third side.
    Example:
    triangleArea(3, 4, 5) == 6.00
    triangleArea(1, 2, 10) == -1
     */",sources/Java/71.java,targets/Java/71.java,AST/Java/71.ast
"/**
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    willItFly(Arrays.asList(1, 2), 5) -> false
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    willItFly(Arrays.asList(3, 2, 3), 1) -> false
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    willItFly(Arrays.asList(3, 2, 3), 9) -> true
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    willItFly(Arrays.asList(3), 5) -> true
    # 3 is less than the maximum possible weight, and it's balanced.
     */",sources/Java/72.java,targets/Java/72.java,AST/Java/72.ast
"/**
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4
    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1
    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0
     */",sources/Java/73.java,targets/Java/73.java,AST/Java/73.ast
"/**
    Write a function that accepts two lists of strings and returns the list that has
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    totalMatch(Arrays.asList(), Arrays.asList()) -> []
    totalMatch(Arrays.asList(""hi"", ""admin""), Arrays.asList(""hI"", ""Hi"")) -> [""hI"", ""Hi""]
    totalMatch(Arrays.asList(""hi"", ""admin""), Arrays.asList(""hi"", ""hi"", ""admin"", ""project"")) -> [""hi"", ""admin""]
    totalMatch(Arrays.asList(""hi"", ""admin""), Arrays.asList(""hI"", ""hi"", ""hi"")) -> [""hI"", ""hi"", ""hi""]
    totalMatch(Arrays.asList(""4""), Arrays.asList(""1"", ""2"", ""3"", ""4"", ""5"")) -> [""4""]
     */",sources/Java/74.java,targets/Java/74.java,AST/Java/74.ast
"/**
    Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100.
    Example:
    isMultiplyPrime(30) == true
    30 = 2 * 3 * 5
     */",sources/Java/75.java,targets/Java/75.java,AST/Java/75.ast
"/**
    Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    isSimplePower(1, 4) => true
    isSimplePower(2, 2) => true
    isSimplePower(8, 2) => true
    isSimplePower(3, 2) => false
    isSimplePower(3, 1) => false
    isSimplePower(5, 3) => false
     */",sources/Java/76.java,targets/Java/76.java,AST/Java/76.ast
"/**
    Write a function that takes an integer a and returns true
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> true
    iscube(2) ==> false
    iscube(-1) ==> true
    iscube(64) ==> true
    iscube(0) ==> true
    iscube(180) ==> false
     */",sources/Java/77.java,targets/Java/77.java,AST/Java/77.ast
"/**
    You have been tasked to write a function that receives
    a hexadecimal number as a string and counts the number of hexadecimal
    digits that are primes (prime number, or a prime, is a natural number
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7,
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string,
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
     */",sources/Java/78.java,targets/Java/78.java,AST/Java/78.ast
"/**
    You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimalToBinary(15)   // returns ""db1111db""
    decimalToBinary(32)   // returns ""db100000db""
     */",sources/Java/79.java,targets/Java/79.java,AST/Java/79.ast
"/**
    You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    isHappy(a) => false
    isHappy(aa) => false
    isHappy(abcd) => true
    isHappy(aabb) => false
    isHappy(adb) => true
    isHappy(xyy) => false
     */",sources/Java/80.java,targets/Java/80.java,AST/Java/80.ast
"/**
    It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A
            > 3.3                A-
            > 3.0                B+
            > 2.7                B
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+
            > 0.7                D
            > 0.0                D-
              0.0                E


    Example:
    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [""A+"", ""B"", ""C-"", ""C"", ""A-""]
     */",sources/Java/81.java,targets/Java/81.java,AST/Java/81.ast
"/**
    Write a function that takes a string and returns true if the string
    length is a prime number or false otherwise
    Examples
    primeLength(""Hello"") == true
    primeLength(""abcdcba"") == true
    primeLength(""kittens"") == true
    primeLength(""orange"") == false
     */",sources/Java/82.java,targets/Java/82.java,AST/Java/82.ast
"/**
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
     */",sources/Java/83.java,targets/Java/83.java,AST/Java/83.ast
"/**
    Given a positive integer N, return the total sum of its digits in binary.

    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".

    Variables:
        @N integer
             Constraints: 0 <= N <= 10000.
    Output:
         a string of binary number
     */",sources/Java/84.java,targets/Java/84.java,AST/Java/84.ast
"/**
    Given a non-empty list of integers lst. add the even elements that are at odd indices..

    Examples:
        add(Arrays.asList(4, 2, 6, 7)) ==> 2
     */",sources/Java/85.java,targets/Java/85.java,AST/Java/85.ast
"/**
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    antiShuffle(""Hi"") returns ""Hi""
    antiShuffle(""hello"") returns ""ehllo""
    antiShuffle(""Hello World!!!"") returns ""Hello !!!Wdlor""
     */",sources/Java/86.java,targets/Java/86.java,AST/Java/86.ast
"/**
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of lists, [[x1, y1], [x2, y2] ...] such that
    each list is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.

    Examples:
    getRow([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
    getRow([], 1) == []
    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]
     */",sources/Java/87.java,targets/Java/87.java,AST/Java/87.ast
"/**
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sortArray(Arrays.asList()) => []
    * sortArray(Arrays.asList(5)) => [5]
    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]
    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]
     */",sources/Java/88.java,targets/Java/88.java,AST/Java/88.ast
"/**
    Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated.
    The alphabet should be rotated in a manner such that the letters
    shift down by two multiplied to two places.
    For example:
    encrypt(""hi"") returns ""lm""
    encrypt(""asdfghjkl"") returns ""ewhjklnop""
    encrypt(""gf"") returns ""kj""
    encrypt(""et"") returns ""ix""
     */",sources/Java/89.java,targets/Java/89.java,AST/Java/89.ast
"/**
    You are given a list of integers.
    Write a function nextSmallest() that returns the 2nd smallest element of the list.
    Return null if there is no such element.
    <p>
    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]
    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]
    nextSmallest(Arrays.asList()) == Optional.empty
    nextSmallest(Arrays.asList(1, 1)) == Optional.empty
     */",sources/Java/90.java,targets/Java/90.java,AST/Java/90.ast
"/**
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.

    For example:
    >>> isBored(""Hello world"")
    0
    >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
    1
     */",sources/Java/91.java,targets/Java/91.java,AST/Java/91.ast
"/**
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.

    Examples
    anyInt(5, 2, 7) -> true

    anyInt(3, 2, 2) -> false

    anyInt(3, -2, 1) -> true

    anyInt(3.6, -2.2, 2) -> false
     */",sources/Java/92.java,targets/Java/92.java,AST/Java/92.ast
"/**
    Write a function that takes a message, and encodes in such a
    way that it swaps case of all letters, replaces all vowels in
    the message with the letter that appears 2 places ahead of that
    vowel in the english alphabet.
    Assume only letters.

    Examples:
    >>> encode(""test"")
    ""TGST""
    >>> encode(""This is a message"")
    ""tHKS KS C MGSSCGG""
     */",sources/Java/93.java,targets/Java/93.java,AST/Java/93.ast
"/**
    You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
     */",sources/Java/94.java,targets/Java/94.java,AST/Java/94.ast
"/**
    Given a map, return True if all keys are strings in lower
    case or all keys are strings in upper case, else return False.
    The function should return False is the given map is empty.
    Examples:
    checkDictCase({""a"":""apple"", ""b"":""banana""}) should return True.
    checkDictCase({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    checkDictCase({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    checkDictCase({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    checkDictCase({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
     */",sources/Java/95.java,targets/Java/95.java,AST/Java/95.ast
"/**
    Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    countUpTo(5) => [2,3]
    countUpTo(11) => [2,3,5,7]
    countUpTo(0) => []
    countUpTo(20) => [2,3,5,7,11,13,17,19]
    countUpTo(1) => []
    countUpTo(18) => [2,3,5,7,11,13,17]
     */",sources/Java/96.java,targets/Java/96.java,AST/Java/96.ast
"/**
    Complete the function that takes two integers and returns
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
     */",sources/Java/97.java,targets/Java/97.java,AST/Java/97.ast
"/**
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    countUpper(""aBCdEf"") returns 1
    countUpper(""abcdefg"") returns 0
    countUpper(""dBBE"") returns 0
     */",sources/Java/98.java,targets/Java/98.java,AST/Java/98.ast
"/**
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
     */",sources/Java/99.java,targets/Java/99.java,AST/Java/99.ast
"/**
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> makeAPile(3)
    [3, 5, 7]
     */",sources/Java/100.java,targets/Java/100.java,AST/Java/100.ast
"/**
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"").equals(Arrays.asList(""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"").equals(Arrays.asList(""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
     */",sources/Java/101.java,targets/Java/101.java,AST/Java/101.ast
"/**
    This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If
    there's no such number, then the function should return -1.
    
    For example:
    chooseNum(12, 15) = 14
    chooseNum(13, 12) = -1
     */",sources/Java/102.java,targets/Java/102.java,AST/Java/102.ast
"/**
    You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m).
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    roundedAvg(1, 5) => ""11""
    roundedAvg(7, 5) => -1
    roundedAvg(10, 20) => ""1111""
    roundedAvg(20, 33) => ""11011""
     */",sources/Java/103.java,targets/Java/103.java,AST/Java/103.ast
"/**
    Given a list of positive integers x. return a sorted list of all
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))
    [1, 15, 33]
    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))
    []
     */",sources/Java/104.java,targets/Java/104.java,AST/Java/104.ast
"/**
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

      If the array is empty, return an empty array:
      arr = []
      return []

      If the array has any strange number ignore it:
      arr = [1, -1 , 55]
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = [""One""]
     */",sources/Java/105.java,targets/Java/105.java,AST/Java/105.ast
"/**
    Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
     */",sources/Java/106.java,targets/Java/106.java,AST/Java/106.ast
"/**
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
     */",sources/Java/107.java,targets/Java/107.java,AST/Java/107.ast
"/**
    Write a function countNums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> countNums(Arrays.asList()) == 0
    >>> countNums(Arrays.asList(-1, 11, -11)) == 1
    >>> countNums(Arrays.asList(1, 1, 2)) == 3
     */",sources/Java/108.java,targets/Java/108.java,AST/Java/108.ast
"/**
    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.

    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index.

    If it is possible to obtain the sorted array by performing the above operation
    then return true else return False.
    If the given array is empty then return true.

    Note: The given list is guaranteed to have unique elements.

    For Example:

    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
     */",sources/Java/109.java,targets/Java/109.java,AST/Java/109.ast
"/**
    In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => ""YES""
    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => ""NO""
    It is assumed that the input lists will be non-empty.
     */",sources/Java/110.java,targets/Java/110.java,AST/Java/110.ast
"/**
    Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.

    Example:
    histogram(""a b c"") == {""a"": 1, ""b"": 1, ""c"": 1}
    histogram(""a b b a"") == {""a"": 2, ""b"": 2}
    histogram(""a b c a b"") == {""a"": 2, ""b"": 2}
    histogram(""b b b b a"") == {""b"": 4}
    histogram("""") == {}
     */",sources/Java/111.java,targets/Java/111.java,AST/Java/111.ast
"/**
    Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and true/false for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be (""bcd"",false)
    For s = ""abcdef"", c = ""b""  the result should be (""acdef"",false)
    For s = ""abcdedcba"", c = ""ab"", the result should be (""cdedc"",true)
     */",sources/Java/112.java,targets/Java/112.java,AST/Java/112.ast
"/**
    Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i""th string of the input.

    >>> oddCount(Arrays.asList(""1234567""))
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> oddCount(Arrays.asList(""3"",""11111111""))
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     */",sources/Java/113.java,targets/Java/113.java,AST/Java/113.ast
"/**
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1
    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6
     */",sources/Java/114.java,targets/Java/114.java,AST/Java/114.ast
"/**
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it,
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input:
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input:
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5

    Example 3:
        Input:
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
     */",sources/Java/115.java,targets/Java/115.java,AST/Java/115.ast
"/**
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.
    <p>
    It must be implemented like this:
    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))
    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))
    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))
     */",sources/Java/116.java,targets/Java/116.java,AST/Java/116.ast
"/**
    Given a string s and a natural number n, you have been tasked to implement
    a function that returns a list of all words from string s that contain exactly
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    selectWords(""Mary had a little lamb"", 4) ==> [""little""]
    selectWords(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    selectWords(""simple white space"", 2) ==> []
    selectWords(""Hello world"", 4) ==> [""world""]
    selectWords(""Uncle sam"", 3) ==> [""Uncle""]
     */",sources/Java/117.java,targets/Java/117.java,AST/Java/117.ast
"/**
    You are given a word. Your task is to find the closest vowel that stands between
    two consonants from the right side of the word (case sensitive).

    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition.

    You may assume that the given string contains English letter only.

    Example:
    getClosestVowel(""yogurt"") ==> ""u""
    getClosestVowel(""FULL"") ==> ""U""
    getClosestVowel(""quick"") ==> """"
    getClosestVowel(""ab"") ==> """"
     */",sources/Java/118.java,targets/Java/118.java,AST/Java/118.ast
"/**
    You are given a list of two strings, both strings consist of open
    parentheses ""("" or close parentheses "")"" only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string ""(())()"" is good, while the string
    ""())"" is not.
    Return ""Yes"" if there""s a way to make a good string, and return ""No"" otherwise.

    Examples:
    matchParens(Arrays.asList(""()("", "")"")) == ""Yes""
    matchParens(Arrays.asList("")"", "")"")) == ""No""
     */",sources/Java/119.java,targets/Java/119.java,AST/Java/119.ast
"/**
    Given an array arr of integers and a positive integer k, return a sorted list
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
     */",sources/Java/120.java,targets/Java/120.java,AST/Java/120.ast
"/**
    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.

    Examples
    solution(Arrays.asList(5, 8, 7, 1)) ==> 12
    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9
    solution(Arrays.asList(30, 13, 24, 321)) ==>0
     */",sources/Java/121.java,targets/Java/121.java,AST/Java/121.ast
"/**
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
     */",sources/Java/122.java,targets/Java/122.java,AST/Java/122.ast
"/**
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the
    previous term as follows: if the previous term is even, the next term is one half of
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note:
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
     */",sources/Java/123.java,targets/Java/123.java,AST/Java/123.ast
"/**
    You have to write a function which validates a given date string and
    returns true if the date is valid otherwise false.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example:
    validDate(""03-11-2000"") => true
    validDate(""15-01-2012"") => false
    validDate(""04-0-2040"") => false
    validDate(""06-04-2020"") => true
    validDate(""06/04/2020"") => false
     */",sources/Java/124.java,targets/Java/124.java,AST/Java/124.ast
"/**
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    splitWords(""Hello world!"") == [""Hello"", ""world!""]
    splitWords(""Hello,world!"") == [""Hello"", ""world!""]
    splitWords(""abcdef"") == 3
     */",sources/Java/125.java,targets/Java/125.java,AST/Java/125.ast
"/**
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return false. Assume no negative numbers and only integers.

    Examples
    isSorted(Arrays.asList(5)) -> true
    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true
    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false
    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true
    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true
    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false
    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true
    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false
     */",sources/Java/126.java,targets/Java/126.java,AST/Java/126.ast
"/**
    You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
     */",sources/Java/127.java,targets/Java/127.java,AST/Java/127.ast
"/**
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9
    >>> prodSigns(Arrays.asList(0, 1)) == 0
    >>> prodSigns(Arrays.asList()) == None
     */",sources/Java/128.java,targets/Java/128.java,AST/Java/128.ast
"/**
    Given a grid with N rows and N columns (N >= 2) and a positive integer k,
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
     */",sources/Java/129.java,targets/Java/129.java,AST/Java/129.ast
"/**
    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8
    You are given a non-negative integer number n, you have to a return a list of the
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
     */",sources/Java/130.java,targets/Java/130.java,AST/Java/130.ast
"/**
    Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
     */",sources/Java/131.java,targets/Java/131.java,AST/Java/131.ast
"/**
    Create a function that takes a string as input which contains only square brackets.
    The function should return true if and only if there is a valid subsequence of brackets
    where at least one bracket in the subsequence is nested.

    isNested(""[[]]"") -> true
    isNested(""[]]]]]]][[[[[]"") -> false
    isNested(""[][]"") -> false
    isNested(""[]"") -> false
    isNested(""[[][]]"") -> true
    isNested(""[[]][["") -> true
     */",sources/Java/132.java,targets/Java/132.java,AST/Java/132.ast
"/**
    You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
     */",sources/Java/133.java,targets/Java/133.java,AST/Java/133.ast
"/**
    Create a function that returns true if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and false otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    checkIfLastCharIsALetter(""apple pie"") -> false
    checkIfLastCharIsALetter(""apple pi e"") -> true
    checkIfLastCharIsALetter(""apple pi e "") -> false
    checkIfLastCharIsALetter("""") -> false
     */",sources/Java/134.java,targets/Java/134.java,AST/Java/134.ast
"/**
    Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    canArrange(Arrays.asList(1,2,4,3,5)) = 3
    canArrange(Arrays.asList(1,2,3)) = -1
     */",sources/Java/135.java,targets/Java/135.java,AST/Java/135.ast
"/**
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))
    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())
    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())
     */",sources/Java/136.java,targets/Java/136.java,AST/Java/136.ast
"/**
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compareOne(1, 2.5) -> Optional.of(2.5)
    compareOne(1, ""2,3"") -> Optional.of(""2,3"")
    compareOne(""5,1"", ""6"") -> Optional.of(""6"")
    compareOne(""1"", 1) -> Optional.empty()
     */",sources/Java/137.java,targets/Java/137.java,AST/Java/137.ast
"/**
    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    isEqualToSumEven(4) == false
    isEqualToSumEven(6) == false
    isEqualToSumEven(8) == true
     */",sources/Java/138.java,targets/Java/138.java,AST/Java/138.ast
"/**
    The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> specialFactorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
     */",sources/Java/139.java,targets/Java/139.java,AST/Java/139.ast
"/**
    Given a string text, replace all spaces in it with underscores,
    and if a string has more than 2 consecutive spaces,
    then replace all consecutive spaces with -

    fixSpaces(""Example"") == ""Example""
    fixSpaces(""Example 1"") == ""Example_1""
    fixSpaces("" Example 2"") == ""_Example_2""
    fixSpaces("" Example   3"") == ""_Example-3""
     */",sources/Java/140.java,targets/Java/140.java,AST/Java/140.ast
"/**
    Create a function which takes a string representing a file's name, and returns
    ""Yes"" if the the file's name is valid, and returns ""No"" otherwise.
    A file's name is considered to be valid if and only if all the following conditions
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: [""txt"", ""exe"", ""dll""]
    Examples:
    file_name_check(""example.txt"") # => ""Yes""
    file_name_check(""1example.dll"") # => ""No"" (the name should start with a latin alphapet letter)
     */",sources/Java/141.java,targets/Java/141.java,AST/Java/141.ast
"/**
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.

    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
     */",sources/Java/142.java,targets/Java/142.java,AST/Java/142.ast
"/**
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
     */",sources/Java/143.java,targets/Java/143.java,AST/Java/143.ast
"/**
    Your task is to implement a function that will simplify the expression
    x * n. The function returns true if x * n evaluates to a whole number and false
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = true
    simplify(""1/6"", ""2/1"") = false
    simplify(""7/10"", ""10/2"") = false
     */",sources/Java/144.java,targets/Java/144.java,AST/Java/144.ast
"/**
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]
    >>> orderByPoints(Arrays.asList()) == []
     */",sources/Java/145.java,targets/Java/145.java,AST/Java/145.ast
"/**
    Write a function that takes an array of numbers as input and returns
    the number of elements in the array that are greater than 10 and both
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1
    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2
     */",sources/Java/146.java,targets/Java/146.java,AST/Java/146.ast
"/**
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation:
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
     */",sources/Java/147.java,targets/Java/147.java,AST/Java/147.ast
"/**
    There are eight planets in our solar system: the closerst to the Sun
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2.
    The function should return a tuple containing all planets whose orbits are
    located between the orbit of planet1 and the orbit of planet2, sorted by
    the proximity to the sun.
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names.
    Examples
    bf(""Jupiter"", ""Neptune"") ==> [""Saturn"", ""Uranus""]
    bf(""Earth"", ""Mercury"") ==> [""Venus""]
    bf(""Mercury"", ""Uranus"") ==> [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     */",sources/Java/148.java,targets/Java/148.java,AST/Java/148.ast
"/**
    Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert listSort(Arrays.asList(""aa"", ""a"", ""aaa"")) => [""aa""]
    assert listSort(Arrays.asList(""ab"", ""a"", ""aaa"", ""cd"")) => [""ab"", ""cd""]
     */",sources/Java/149.java,targets/Java/149.java,AST/Java/149.ast
"/**
    A simple program which should return the value of x if n is
    a prime number and should return the value of y otherwise.

    Examples:
    for xOrY(7, 34, 12) == 34
    for xOrY(15, 8, 5) == 5
     */",sources/Java/150.java,targets/Java/150.java,AST/Java/150.ast
"/**
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.

    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10
    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0
    doubleTheDifference(Arrays.asList(9, -2)) == 81
    doubleTheDifference(Arrays.asList(0)) == 0

    If the input list is empty, return 0.
     */",sources/Java/151.java,targets/Java/151.java,
"/**
    I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match.
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.

    example:

    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]
    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]
     */",sources/Java/152.java,targets/Java/152.java,AST/Java/152.ast
"/**
    You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters
    in the extension's name, the strength is given by the fraction CAP - SM.
    You should find the strongest extension and return a string in this
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: [""SErviNGSliCes"", ""Cheese"", ""StuFfed""] then you should
    return ""Slices.SErviNGSliCes"" since ""SErviNGSliCes"" is the strongest extension
    (its strength is -1).
    Example:
    for StrongestExtension(""my_class"", [""AA"", ""Be"", ""CC""]) == ""my_class.AA""
     */",sources/Java/153.java,targets/Java/153.java,AST/Java/153.ast
"/**
    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    cycpatternCheck(""abcd"",""abd"") => false
    cycpatternCheck(""hello"",""ell"") => true
    cycpatternCheck(""whassup"",""psus"") => false
    cycpatternCheck(""abab"",""baa"") => true
    cycpatternCheck(""efef"",""eeff"") => false
    cycpatternCheck(""himenss"",""simen"") => true
     */",sources/Java/154.java,targets/Java/154.java,AST/Java/154.ast
"/**
    Given an integer. return a tuple that has the number of even and odd digits respectively.
    
     Example:
        evenOddCount(-12) ==> (1, 1)
        evenOddCount(123) ==> (1, 2)
     */",sources/Java/155.java,targets/Java/155.java,AST/Java/155.ast
"/**
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> intToMiniRoman(19) == ""xix""
    >>> intToMiniRoman(152) == ""clii""
    >>> intToMiniRoman(426) == ""cdxxvi""
     */",sources/Java/156.java,targets/Java/156.java,AST/Java/156.ast
"/**
    Given the lengths of the three sides of a triangle. Return true if the three
    sides form a right-angled triangle, false otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or
    90 degree.
    Example:
    rightAngleTriangle(3, 4, 5) == true
    rightAngleTriangle(1, 2, 3) == false
     */",sources/Java/157.java,targets/Java/157.java,AST/Java/157.ast
"/**
    Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    findMax([""name"", ""of"", ""string""]) == ""string""
    findMax([""name"", ""enam"", ""game""]) == ""enam""
    findMax([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
     */",sources/Java/158.java,targets/Java/158.java,AST/Java/158.ast
"/**
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.

    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]

    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock

    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
     */",sources/Java/159.java,targets/Java/159.java,AST/Java/159.ast
"/**
    Given two lists operator, and operand. The first list has basic algebra operations, and
    the second list is a list of integers. Use the two given lists to build the algebric
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + )
    Subtraction ( - )
    Multiplication ( * )
    Floor division ( / )
    Exponentiation ( ** )

    Example:
    operator[""+"", ""*"", ""-""]
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.
     */",sources/Java/160.java,targets/Java/160.java,AST/Java/160.ast
"/**
    You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa,
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
     */",sources/Java/161.java,targets/Java/161.java,AST/Java/161.ast
"/**
    Given a string ""text"", return its md5 hash equivalent string with length being 32.
    If ""text"" is an empty string, return Optional.empty().
    
    >>> stringToMd5(""Hello world"") == ""3e25960a79dbc69b674cd4ec67a72c62""
     */",sources/Java/162.java,targets/Java/162.java,AST/Java/162.ast
"/**
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generateIntegers(2, 8) => [2, 4, 6, 8]
    generateIntegers(8, 2) => [2, 4, 6, 8]
    generateIntegers(10, 14) => []
     */",sources/Java/163.java,targets/Java/163.java,AST/Java/163.ast
